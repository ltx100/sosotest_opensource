# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2019-04-15 14:49
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TbAdminInterfacePermissionRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissionName', models.CharField(db_column='permissionName', default='', max_length=255)),
                ('permissionKey', models.CharField(db_column='permissionKey', default='', max_length=100, unique=True, verbose_name='权限key')),
                ('url', models.CharField(db_column='url', default='', max_length=255, verbose_name='url')),
                ('permission', models.CharField(db_column='permission', default='', max_length=100, verbose_name='权限')),
                ('isDefault', models.IntegerField(default=0, verbose_name='是否为默认权限 0否 1是')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_interface_permission_relation',
            },
        ),
        migrations.CreateModel(
            name='TbAdminManagePermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissionName', models.CharField(db_column='permissionName', max_length=100, verbose_name='权限名称')),
                ('permissionKey', models.CharField(db_column='permissionKey', default='', max_length=100, unique=True, verbose_name='权限key')),
                ('permissionValue', models.CharField(db_column='permissionValue', default='', max_length=200, verbose_name='权限值')),
                ('isDefaultPermission', models.IntegerField(default=0, verbose_name='状态 0不是默认的 1是默认的')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_manage_permission',
            },
        ),
        migrations.CreateModel(
            name='TbAdminManageUserPermissionRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginName', models.CharField(db_column='loginName', max_length=20, verbose_name='登录账号')),
                ('permissionKey', models.CharField(db_column='permissionKey', default='', max_length=100, verbose_name='权限key')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_manage_user_permission_relation',
            },
        ),
        migrations.CreateModel(
            name='TbAdminPlatformPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissionName', models.CharField(db_column='permissionName', default='', max_length=255, verbose_name='权限Name')),
                ('permissionKey', models.CharField(db_column='permissionKey', default='', max_length=100, unique=True, verbose_name='权限key')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_platform_permission',
            },
        ),
        migrations.CreateModel(
            name='TbAdminPlatformPermissionUserRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginName', models.CharField(db_column='loginName', max_length=100, verbose_name='登录名')),
                ('permissionKey', models.CharField(db_column='permissionKey', default='', max_length=100, verbose_name='权限key')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_platform_permission_user_relation',
            },
        ),
        migrations.CreateModel(
            name='TbAdminRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roleName', models.CharField(db_column='roleName', max_length=100, verbose_name='角色名')),
                ('roleKey', models.CharField(db_column='roleKey', default='', max_length=100, unique=True, verbose_name='角色key')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_role',
            },
        ),
        migrations.CreateModel(
            name='TbAdminRolePermissionRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roleKey', models.CharField(db_column='roleKey', default='', max_length=100, unique=True, verbose_name='角色key')),
                ('permissionKey', models.CharField(db_column='permissionKey', default='', max_length=100, unique=True, verbose_name='权限key')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_role_permission_relation',
            },
        ),
        migrations.CreateModel(
            name='TbAdminTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teamName', models.CharField(db_column='teamName', max_length=100, verbose_name='小组名称')),
                ('teamKey', models.CharField(db_column='teamKey', default='', max_length=100, unique=True, verbose_name='小组key')),
                ('teamDesc', models.CharField(db_column='teamDesc', max_length=100, verbose_name='小组描述')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_team',
            },
        ),
        migrations.CreateModel(
            name='TbAdminTeamPermissionRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teamKey', models.CharField(db_column='teamKey', default='', max_length=100, verbose_name='小组key')),
                ('permissionKey', models.CharField(db_column='permissionKey', default='', max_length=100, verbose_name='权限key')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_team_permission_relation',
            },
        ),
        migrations.CreateModel(
            name='TbAdminUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginName', models.CharField(db_column='loginName', max_length=100, unique=True, verbose_name='登录名')),
                ('passWord', models.CharField(db_column='passWord', max_length=100, verbose_name='密码')),
                ('userName', models.CharField(db_column='userName', max_length=100, verbose_name='用户名')),
                ('email', models.CharField(default='', max_length=50, verbose_name='用户邮箱')),
                ('superManager', models.IntegerField(db_column='superManager', default=0, verbose_name='是否为超级管理员，0否，1是')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_user',
            },
        ),
        migrations.CreateModel(
            name='TbAdminUserPermissionRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginName', models.CharField(db_column='loginName', max_length=20, verbose_name='登录账号')),
                ('permissionKey', models.CharField(db_column='permissionKey', default='', max_length=100, verbose_name='权限key')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_user_permission_relation',
            },
        ),
        migrations.CreateModel(
            name='TbAdminUserRoleRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roleKey', models.CharField(db_column='roleKey', default='', max_length=100, verbose_name='角色key')),
                ('loginName', models.CharField(db_column='loginName', default='', max_length=100, verbose_name='登录名')),
                ('teamKey', models.CharField(db_column='teamKey', default='', max_length=100, verbose_name='小组key')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_user_role_relation',
            },
        ),
        migrations.CreateModel(
            name='TbAdminUserTeamRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginName', models.CharField(db_column='loginName', default='', max_length=100, verbose_name='登录名')),
                ('teamKey', models.CharField(db_column='teamKey', default='', max_length=100, verbose_name='小组key')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_admin_user_team_relation',
            },
        ),
        migrations.CreateModel(
            name='TbBatchTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('businessLine', models.CharField(db_column='businessLine', max_length=200, verbose_name='业务线')),
                ('httpConfKey', models.CharField(db_column='httpConfKey', max_length=20, verbose_name='执行环境的httpConfKey')),
                ('taskLevel', models.IntegerField(db_column='taskLevel', default='9', verbose_name='任务优先级，0高，5中，9低')),
                ('caseLevel', models.IntegerField(db_column='caseLevel', verbose_name='执行任务中case的优先级，0高，5中，9低')),
                ('taskIdList', models.TextField(db_column='taskIdList', verbose_name='本次批量执行哪些任务')),
                ('status', models.IntegerField(db_column='status', verbose_name='执行状态: NOTRUN = 1 RUNNING = 2 DONE = 3 EXCEPTION = 4 CANCELING = 10 CANCELED = 11')),
                ('isSendEmail', models.IntegerField(db_column='isSendEmail', default=0, verbose_name='是否发送邮件[是否发送:是否带附件:PASS是否发送:FAIL是否发送:ERROR是否发送:EXCEPTION是否发送]0的时候不发送，1开头的时候依次往后判断即可后面没有的都是1，例如11标识发送带附件所有情况都发送10标识发送不带附件所有情况都发送100标识发送不带附件成功不发送其他情况发送')),
                ('isCodeRate', models.IntegerField(db_column='isCodeRate', default=0, verbose_name='是否生成代码覆盖率 1生成 0不生成')),
                ('isSaveHistory', models.IntegerField(db_column='isSaveHistory', default=0, verbose_name='是否保存到历史记录 1保存 0不保存')),
                ('testResult', models.CharField(db_column='testResult', default='NOTRUN', max_length=20, verbose_name='测试结果 根据断言结果生成的测试结果 PASS/FAIL/ERROR/EXCEPTION/CANCEL')),
                ('executeMsg', models.TextField(db_column='executeMsg', default='[]', verbose_name='测试过程中产生的信息')),
                ('version', models.CharField(db_column='version', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '任务批量执行',
                'verbose_name_plural': '12任务批量执行',
                'db_table': 'tb_batch_execute_task',
            },
        ),
        migrations.CreateModel(
            name='TbBusinessLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bussinessLineName', models.CharField(db_column='bussinessLineName', max_length=25, unique=True, verbose_name='businessLine名字')),
                ('bussinessLineDesc', models.CharField(db_column='bussinessLineDesc', default='', max_length=2000, verbose_name='businessLine描述')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '03业务线',
                'verbose_name_plural': '03业务线管理',
                'db_table': 'tb_business_line',
            },
        ),
        migrations.CreateModel(
            name='TbBusinessLineModuleRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=10, verbose_name='显示优先级，数字越小越优先')),
                ('businessLineId', models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID')),
            ],
            options={
                'verbose_name': '业务线模块关系表',
                'verbose_name_plural': '041业务线模块关系表',
                'db_table': 'tb_businessLine_module_relation',
            },
        ),
        migrations.CreateModel(
            name='TbConfigHttp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('httpConfKey', models.CharField(db_column='httpConfKey', max_length=50, unique=True, verbose_name='http服务的key，用例调试、任务执行时，会根据此key来获取对应的http的config信息')),
                ('alias', models.CharField(max_length=200, unique=True, verbose_name='别名')),
                ('httpConfDesc', models.CharField(db_column='httpConfDesc', default='', max_length=5000, verbose_name='详细描述')),
                ('apiRunState', models.IntegerField(choices=[(1, '显示'), (0, '不显示')], db_column='apiRunState', default=1, verbose_name='是否在API执行时显示 0不显示 1显示')),
                ('uiRunState', models.IntegerField(choices=[(1, '显示'), (0, '不显示')], db_column='uiRunState', default=0, verbose_name='是否在UI执行时显示 0不显示 1显示')),
                ('dubboRunState', models.IntegerField(choices=[(1, '显示'), (0, '不显示')], db_column='dubboRunState', default=0, verbose_name='是否在dubbo执行时显示 0不显示 1显示')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '环境配置',
                'verbose_name_plural': '08环境配置管理',
                'db_table': 'tb_config_http',
            },
        ),
        migrations.CreateModel(
            name='TbConfigService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceConfKey', models.CharField(db_column='serviceConfKey', max_length=50, unique=True, verbose_name='service服务的key，TbConfigHttp会根据此key关联对应的使用的service，用户新增TbConfigHttp可选择service')),
                ('alias', models.CharField(max_length=200, unique=True, verbose_name='别名，显示给用户，用户选择时看到的描述')),
                ('serviceConfDesc', models.CharField(db_column='serviceConfDesc', default='', max_length=5000, verbose_name='详细描述')),
                ('serviceConf', models.TextField(db_column='serviceConf', verbose_name='配置文件，configparser通用的配置文件格式\n[DB]\nhost = 192.168.0.75\nport = 3306\nusername = admin\npassword = rkhd+0718=xsy!\ndbname = noname\n')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '数据服务器',
                'verbose_name_plural': '06数据服务器管理',
                'db_table': 'tb_config_service',
            },
        ),
        migrations.CreateModel(
            name='TbConfigUri',
            fields=[
                ('id', models.IntegerField(auto_created=True, db_column='id', verbose_name='id非主键 无自增')),
                ('uriKey', models.CharField(db_column='uriKey', max_length=100, primary_key=True, serialize=False)),
                ('alias', models.CharField(max_length=200, unique=True)),
                ('uriDesc', models.CharField(db_column='uriDesc', default='', max_length=5000)),
                ('level', models.IntegerField(default=5, verbose_name='优先级，数字越小越优先显示')),
                ('protocol', models.CharField(choices=[('HTTP', 'HTTP'), ('DUBBO', 'DUBBO')], db_column='protocol', default='HTTP', max_length=300)),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': 'URI管理',
                'verbose_name_plural': '07URI管理',
                'db_table': 'tb_config_uri',
            },
        ),
        migrations.CreateModel(
            name='TbEnvUriConf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('httpConfKey', models.CharField(db_column='httpConfKey', max_length=50, verbose_name='http服务的key，用例调试、任务执行时，会根据此key来获取对应的http的config信息')),
                ('uriKey', models.CharField(db_column='uriKey', max_length=100)),
                ('requestAddr', models.TextField(db_column='requestAddr', verbose_name='请求地址')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '环境服务配置',
                'verbose_name_plural': '08环境服务配置管理',
                'db_table': 'tb_env_uri_conf',
            },
        ),
        migrations.CreateModel(
            name='TbExecPythonAttrs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execPythonAttr', models.CharField(db_column='execPythonAttr', max_length=200, unique=True, verbose_name='属性key，例如importStr,timeoutTime')),
                ('execPythonDesc', models.CharField(db_column='execPythonDesc', max_length=1000, verbose_name='描述')),
                ('execPythonValue', models.TextField(db_column='execPythonValue', verbose_name='属性值，例如import json 或者0 等')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '执行python代码管理',
                'verbose_name_plural': '12执行python代码管理py',
                'db_table': 'tb_exec_python_attrs',
            },
        ),
        migrations.CreateModel(
            name='TbGlobalText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('textDesc', models.CharField(db_column='textDesc', default='', max_length=5000, verbose_name='详情')),
                ('textKey', models.CharField(db_column='textKey', max_length=100, unique=True, verbose_name='文本key,中英文数字下划线组合')),
                ('textValue', models.TextField(db_column='textValue', verbose_name='文本value')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_global_text',
            },
        ),
        migrations.CreateModel(
            name='TbGlobalVars',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('varDesc', models.CharField(db_column='varDesc', max_length=5000, verbose_name='详情')),
                ('varKey', models.CharField(db_column='varKey', max_length=100, unique=True, verbose_name='全局变量key,中英文数字下划线组合')),
                ('varValue', models.TextField(db_column='varValue', verbose_name='全局变量value')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_global_vars',
            },
        ),
        migrations.CreateModel(
            name='TbHttpInterface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interfaceId', models.CharField(db_column='interfaceId', max_length=25, unique=True, verbose_name='接口ID，例如HTTP_INTERFACE_1')),
                ('title', models.CharField(max_length=100, verbose_name='标题')),
                ('casedesc', models.TextField(default='', verbose_name='描述')),
                ('caselevel', models.IntegerField(default=5, verbose_name='用例优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='用例状态，1新建待审核 2审核通过 3审核未通过')),
                ('caseType', models.IntegerField(default=2, verbose_name='用例类型，0测试用例，不计入统计，不进入任务，1 接口计入统计 2接口步骤均计入统计 3步骤计入统计')),
                ('varsPre', models.TextField(db_column='varsPre', default='', verbose_name='前置变量')),
                ('uri', models.CharField(max_length=50, verbose_name='HTTP请求的URI，http://domainORip,或者是 uri表中的key，比如apiUri等')),
                ('method', models.CharField(choices=[('POST', 'POST'), ('GET', 'GET'), ('PUT', 'PUT'), ('PATCH', 'PATCH'), ('DELETE', 'DELETE'), ('HEAD', 'HEAD'), ('OPTIONS', 'OPTIONS')], default='POST', max_length=20, verbose_name='HTTP请求的method')),
                ('header', models.TextField(verbose_name='HTTP请求的头信息，json格式')),
                ('url', models.CharField(max_length=250, verbose_name='HTTP请求的URL，也就是接口路径')),
                ('params', models.TextField(verbose_name='HTTP请求的参数，urlencode格式或者json格式')),
                ('bodyType', models.CharField(choices=[('form-data', '表单提交'), ('x-www-form-urlencoded', 'urlencode模式'), ('raw', '源提交，例如application/json等'), ('binary', '单文件上传'), ('', 'GET、head时无请求体')], db_column='bodyType', default='', max_length=200, verbose_name='请求体类型')),
                ('bodyContent', models.TextField(db_column='bodyContent', default='', verbose_name='请求体内容，字符串或者json')),
                ('timeout', models.IntegerField(default=20, verbose_name='超时时间，单位秒')),
                ('varsPost', models.TextField(db_column='varsPost', verbose_name='后置变量')),
                ('performanceTime', models.FloatField(db_column='performanceTime', default=1, verbose_name='接口性能时间')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_http_interface',
            },
        ),
        migrations.CreateModel(
            name='TbHttpInterfaceDebug',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interfaceId', models.CharField(db_column='interfaceId', max_length=25, verbose_name='接口ID，例如HTTP_INTERFACE_1')),
                ('title', models.CharField(max_length=100, verbose_name='标题')),
                ('casedesc', models.TextField(default='', verbose_name='描述')),
                ('caselevel', models.IntegerField(default=5, verbose_name='用例优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='用例状态，1新建待审核 2审核通过 3审核未通过')),
                ('caseType', models.IntegerField(default=2, verbose_name='用例类型，0测试用例，不计入统计，不进入任务，1 接口计入统计 2接口步骤均计入统计 3步骤计入统计')),
                ('varsPre', models.TextField(db_column='varsPre', default='', verbose_name='前置变量')),
                ('uri', models.CharField(max_length=50, verbose_name='HTTP请求的URI，http://domainORip,或者是 uri表中的key，比如apiUri等')),
                ('method', models.CharField(default='POST', max_length=20, verbose_name='HTTP请求的method')),
                ('header', models.TextField(verbose_name='HTTP请求的头信息，json格式')),
                ('url', models.CharField(max_length=250, verbose_name='HTTP请求的URL，也就是接口路径')),
                ('params', models.TextField(verbose_name='HTTP请求的参数，urlencode格式或者json格式')),
                ('bodyType', models.CharField(choices=[('form-data', '表单提交'), ('x-www-form-urlencoded', 'urlencode模式'), ('raw', '源提交，例如application/json等'), ('binary', '单文件上传'), ('', 'GET、head时无请求体')], db_column='bodyType', default='', max_length=200, verbose_name='请求体类型')),
                ('bodyContent', models.TextField(db_column='bodyContent', default='', verbose_name='请求体内容，字符串或者json')),
                ('timeout', models.IntegerField(default=20, verbose_name='超时时间，单位秒')),
                ('varsPost', models.TextField(db_column='varsPost', verbose_name='后置变量')),
                ('performanceTime', models.FloatField(db_column='performanceTime', default=1, verbose_name='接口性能时间')),
                ('execStatus', models.IntegerField(db_column='execStatus', default=1, verbose_name='执行状态')),
                ('actualResult', models.TextField(blank=True, db_column='actualResult', default='', verbose_name='实际结果')),
                ('assertResult', models.TextField(blank=True, db_column='assertResult', default='', verbose_name='断言结果')),
                ('testResult', models.CharField(db_column='testResult', default='NOTRUN', max_length=20, verbose_name='执行结果')),
                ('beforeExecuteTakeTime', models.IntegerField(db_column='beforeExecuteTakeTime', default=0, verbose_name='执行前耗时')),
                ('afterExecuteTakeTime', models.IntegerField(db_column='afterExecuteTakeTime', default=0, verbose_name='执行后耗时')),
                ('executeTakeTime', models.IntegerField(db_column='executeTakeTime', default=0, verbose_name='执行耗时')),
                ('totalTakeTime', models.IntegerField(db_column='totalTakeTime', default=0, verbose_name='总耗时')),
                ('version', models.CharField(db_column='version', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '接口调试',
                'verbose_name_plural': '09接口调试',
                'db_table': 'tb_http_interface_debug',
            },
        ),
        migrations.CreateModel(
            name='TbHttpInterfaceTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_http_interface_tag',
            },
        ),
        migrations.CreateModel(
            name='TbHttpTestcase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caseId', models.CharField(db_column='caseId', max_length=25, unique=True, verbose_name='caseId,可以理解为用例ID,格式HTTP_TESTCASE_1 - 99999999递增')),
                ('title', models.CharField(max_length=100, verbose_name='用例标题')),
                ('casedesc', models.TextField(default='', verbose_name='描述')),
                ('caselevel', models.IntegerField(default=5, verbose_name='用例优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('stepCount', models.IntegerField(db_column='stepCount', verbose_name='包含步骤数量')),
                ('status', models.IntegerField(default=2, verbose_name='用例状态，1新建待审核 2审核通过 3审核未通过')),
                ('caseType', models.IntegerField(default=2, verbose_name='用例类型，0测试用例，不计入统计，不进入任务，1 接口计入统计 2接口步骤均计入统计 3步骤计入统计')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_http_testcase',
            },
        ),
        migrations.CreateModel(
            name='TbHttpTestcaseDebug',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caseId', models.CharField(db_column='caseId', max_length=25, verbose_name='caseId,可以理解为用例ID,格式HTTP_TESTCASE_1 - 99999999递增')),
                ('title', models.CharField(max_length=100, verbose_name='用例标题')),
                ('casedesc', models.TextField(default='', verbose_name='描述')),
                ('caselevel', models.IntegerField(default=5, verbose_name='用例优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('stepCount', models.IntegerField(db_column='stepCount', verbose_name='包含步骤数量')),
                ('status', models.IntegerField(default=2, verbose_name='用例状态，1新建待审核 2审核通过 3审核未通过')),
                ('caseType', models.IntegerField(default=2, verbose_name='用例类型，0测试用例，不计入统计，不进入任务，1 接口计入统计 2接口步骤均计入统计 3步骤计入统计')),
                ('execStatus', models.IntegerField(db_column='execStatus', default=1, verbose_name='执行状态: NOTRUN = 1 RUNNING = 2 DONE = 3 EXCEPTION = 4')),
                ('assertResult', models.TextField(blank=True, db_column='assertResult', default='', verbose_name='断言结果')),
                ('testResult', models.CharField(db_column='testResult', default='NOTRUN', max_length=20, verbose_name='执行结果')),
                ('beforeExecuteTakeTime', models.IntegerField(db_column='beforeExecuteTakeTime', default=0, verbose_name='执行前耗时')),
                ('afterExecuteTakeTime', models.IntegerField(db_column='afterExecuteTakeTime', default=0, verbose_name='执行后耗时')),
                ('executeTakeTime', models.IntegerField(db_column='executeTakeTime', default=0, verbose_name='执行耗时')),
                ('totalTakeTime', models.IntegerField(db_column='totalTakeTime', default=0, verbose_name='总耗时')),
                ('version', models.CharField(db_column='version', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '用例调试',
                'verbose_name_plural': '09用例调试',
                'db_table': 'tb_http_testcase_debug',
            },
        ),
        migrations.CreateModel(
            name='TbHttpTestcaseStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stepNum', models.IntegerField(db_column='stepNum', verbose_name='步骤编号，每个caseID中的有效编号是从1递增')),
                ('title', models.CharField(max_length=100, verbose_name='步骤标题，默认 步骤1，步骤2 等等')),
                ('stepDesc', models.TextField(default='', verbose_name='描述')),
                ('caseType', models.IntegerField(default=2, verbose_name='用例类型，0测试用例，不计入统计，不进入任务，1 接口计入统计 2接口步骤均计入统计 3步骤计入统计')),
                ('fromInterfaceId', models.CharField(db_column='fromInterfaceId', default='', max_length=30, verbose_name='步骤引用的接口Id')),
                ('isSync', models.IntegerField(choices=[(0, '不同步'), (1, '同步')], default=0, verbose_name='是否同步')),
                ('varsPre', models.TextField(db_column='varsPre', verbose_name='前置变量')),
                ('uri', models.CharField(max_length=50, verbose_name='HTTP请求的URI，http://domainORip,或者是 uri表中的key，比如apiUri等')),
                ('method', models.CharField(default='POST', max_length=20, verbose_name='HTTP请求的method')),
                ('header', models.TextField(verbose_name='HTTP请求的头信息，json格式')),
                ('url', models.CharField(max_length=250, verbose_name='HTTP请求的URL，也就是接口路径')),
                ('params', models.TextField(verbose_name='HTTP请求的参数，urlencode格式或者json格式')),
                ('bodyType', models.CharField(choices=[('form-data', '表单提交'), ('x-www-form-urlencoded', 'urlencode模式'), ('raw', '源提交，例如application/json等'), ('binary', '单文件上传'), ('', 'GET、head时无请求体')], db_column='bodyType', default='', max_length=200, verbose_name='请求体类型')),
                ('bodyContent', models.TextField(db_column='bodyContent', default='', verbose_name='请求体内容，字符串或者json')),
                ('timeout', models.IntegerField(default=20, verbose_name='超时时间，单位秒')),
                ('varsPost', models.TextField(db_column='varsPost', verbose_name='后置变量')),
                ('performanceTime', models.FloatField(db_column='performanceTime', default=1, verbose_name='接口性能时间')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_http_testcase_step',
            },
        ),
        migrations.CreateModel(
            name='TbHttpTestcaseStepDebug',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caseId', models.CharField(db_column='caseId', max_length=25, verbose_name='caseId,可以理解为用例ID,格式HTTP_TESTCASE_1 - 99999999递增')),
                ('stepNum', models.IntegerField(db_column='stepNum', verbose_name='步骤编号，每个caseID中的有效编号是从1递增')),
                ('title', models.CharField(max_length=100, verbose_name='步骤标题，默认 步骤1，步骤2 等等')),
                ('stepDesc', models.TextField(default='', verbose_name='描述')),
                ('caseType', models.IntegerField(default=2, verbose_name='用例类型，0测试用例，不计入统计，不进入任务，1 接口计入统计 2接口步骤均计入统计 3步骤计入统计')),
                ('fromInterfaceId', models.CharField(db_column='fromInterfaceId', default='', max_length=30, verbose_name='步骤引用的接口Id')),
                ('isSync', models.IntegerField(choices=[(0, '不同步'), (1, '同步')], default=0, verbose_name='是否同步')),
                ('varsPre', models.TextField(db_column='varsPre', verbose_name='前置变量')),
                ('uri', models.CharField(max_length=50, verbose_name='HTTP请求的URI，http://domainORip,或者是 uri表中的key，比如apiUri等')),
                ('method', models.CharField(default='POST', max_length=20, verbose_name='HTTP请求的method')),
                ('header', models.TextField(verbose_name='HTTP请求的头信息，json格式')),
                ('url', models.CharField(max_length=250, verbose_name='HTTP请求的URL，也就是接口路径')),
                ('params', models.TextField(verbose_name='HTTP请求的参数，urlencode格式或者json格式')),
                ('bodyType', models.CharField(choices=[('form-data', '表单提交'), ('x-www-form-urlencoded', 'urlencode模式'), ('raw', '源提交，例如application/json等'), ('binary', '单文件上传'), ('', 'GET、head时无请求体')], db_column='bodyType', default='', max_length=200, verbose_name='请求体类型')),
                ('bodyContent', models.TextField(db_column='bodyContent', default='', verbose_name='请求体内容，字符串或者json')),
                ('timeout', models.IntegerField(default=20, verbose_name='超时时间，单位秒')),
                ('varsPost', models.TextField(db_column='varsPost', verbose_name='后置变量')),
                ('performanceTime', models.FloatField(db_column='performanceTime', default=1, verbose_name='接口性能时间')),
                ('execStatus', models.IntegerField(db_column='execStatus', default=1, verbose_name='执行状态')),
                ('actualResult', models.TextField(blank=True, db_column='actualResult', default='', verbose_name='实际结果')),
                ('assertResult', models.TextField(blank=True, db_column='assertResult', default='', verbose_name='断言结果')),
                ('testResult', models.CharField(db_column='testResult', default='NOTRUN', max_length=20, verbose_name='执行结果')),
                ('beforeExecuteTakeTime', models.IntegerField(db_column='beforeExecuteTakeTime', default=0, verbose_name='执行前耗时')),
                ('afterExecuteTakeTime', models.IntegerField(db_column='afterExecuteTakeTime', default=0, verbose_name='执行后耗时')),
                ('executeTakeTime', models.IntegerField(db_column='executeTakeTime', default=0, verbose_name='执行耗时')),
                ('totalTakeTime', models.IntegerField(db_column='totalTakeTime', default=0, verbose_name='总耗时')),
                ('version', models.CharField(db_column='version', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '用例步骤调试',
                'verbose_name_plural': '10用例步骤调试',
                'db_table': 'tb_http_testcase_step_debug',
            },
        ),
        migrations.CreateModel(
            name='TbHttpTestcaseTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_http_testcase_tag',
            },
        ),
        migrations.CreateModel(
            name='TbInterfaceExecuteHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interfaceUrl', models.CharField(db_column='interfaceUrl', max_length=200, verbose_name='请求的接口URL')),
                ('requestHost', models.CharField(db_column='requestHost', max_length=200, verbose_name='请求的主机地址，例如HTTP://test.domain.com')),
                ('totalCount', models.IntegerField(db_column='totalCount', verbose_name='共执行次数统计')),
                ('passCount', models.IntegerField(db_column='passCount', verbose_name='通过次数统计')),
                ('failCount', models.IntegerField(db_column='failCount', verbose_name='失败次数统计')),
                ('errorCount', models.IntegerField(db_column='errorCount', verbose_name='错误次数统计')),
                ('exceptionCount', models.IntegerField(db_column='exceptionCount', verbose_name='异常次数统计')),
                ('taskId', models.CharField(db_column='taskId', max_length=25, verbose_name='执行的任务ID')),
                ('title', models.CharField(max_length=100, verbose_name='任务标题')),
                ('taskdesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('protocol', models.CharField(max_length=20, verbose_name='任务协议')),
                ('testReportUrl', models.CharField(db_column='testReportUrl', max_length=200, verbose_name='报告路径')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_interface_execute_history',
            },
        ),
        migrations.CreateModel(
            name='TbJiraBusinessLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('businessLineName', models.CharField(db_column='businessLineName', max_length=25, unique=True, verbose_name='businessLine名字')),
                ('businessLineDesc', models.CharField(db_column='businessLineDesc', default='', max_length=2000, verbose_name='businessLine描述')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': 'jira业务线',
                'verbose_name_plural': '27jira业务线管理',
                'db_table': 'tb_webPortal_jira_business_line',
            },
        ),
        migrations.CreateModel(
            name='TbJiraBusinessLinePlatFormRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('jiraBusinessLineId', models.ForeignKey(db_column='jiraBusinessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbJiraBusinessLine', verbose_name='jira上的业务线Id')),
                ('platformBusinessLineId', models.ForeignKey(db_column='platformBusinessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='平台上的业务线Id')),
            ],
            options={
                'verbose_name': 'jira业务线与平台对应关系表',
                'verbose_name_plural': '28jira业务线与平台对应关系表',
                'db_table': 'tb_webPortal_jira_business_line_platform_relation',
            },
        ),
        migrations.CreateModel(
            name='TbjiraModule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moduleName', models.CharField(db_column='moduleName', max_length=25, unique=True, verbose_name='module名字')),
                ('moduleDesc', models.CharField(db_column='moduleDesc', default='', max_length=2000, verbose_name='module描述')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': 'jira模块',
                'verbose_name_plural': '29jira模块',
                'db_table': 'tb_webPortal_jira_module',
            },
        ),
        migrations.CreateModel(
            name='TbJiraModulePlatFormRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('jiraModuleId', models.ForeignKey(db_column='jiraModuleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbjiraModule', verbose_name='业务线ID')),
            ],
            options={
                'verbose_name': 'jira模块与平台对应关系表',
                'verbose_name_plural': '30jira模块与平台对应关系表',
                'db_table': 'tb_webPortal_jira_module_platform_relation',
            },
        ),
        migrations.CreateModel(
            name='TbModules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moduleName', models.CharField(db_column='moduleName', max_length=25, unique=True, verbose_name='模块名称')),
                ('moduleDesc', models.CharField(db_column='moduleDesc', max_length=2000, verbose_name='模块描述')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '04模块',
                'verbose_name_plural': '04模块管理',
                'db_table': 'tb_modules',
            },
        ),
        migrations.CreateModel(
            name='TbOpenApiBusinessLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('businessLineName', models.CharField(db_column='businessLineName', max_length=200, verbose_name='业务线')),
                ('businessLineDesc', models.CharField(db_column='businessLineDesc', max_length=200, verbose_name='业务线描述')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': 'openApi业务线',
                'verbose_name_plural': '24openApi业务线',
                'db_table': 'tb_webPortal_openApi_businessLine',
            },
        ),
        migrations.CreateModel(
            name='TbOpenApiUri',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summaryUri', models.CharField(db_column='summaryUri', max_length=200, verbose_name='获取概况数据的URI')),
                ('summaryUrl', models.CharField(db_column='summaryUrl', default='', max_length=200, verbose_name='获取概况数据的URL')),
                ('interfaceTestUri', models.CharField(db_column='interfaceTestUri', max_length=200, verbose_name='获取接口测试数据的URI')),
                ('interfaceTestUrl', models.CharField(db_column='interfaceTestUrl', default='', max_length=200, verbose_name='获取接口测试数据的URL')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': 'openApi_uri',
                'verbose_name_plural': '25openApi_uri',
                'db_table': 'tb_webPortal_openApi_uri',
            },
        ),
        migrations.CreateModel(
            name='TbPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissionName', models.CharField(db_column='permissionName', max_length=100, unique=True, verbose_name='权限名称')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_permissions',
            },
        ),
        migrations.CreateModel(
            name='TbRunServerConf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceName', models.CharField(db_column='serviceName', default='', max_length=30, verbose_name='执行机名称')),
                ('serviceIp', models.CharField(db_column='serviceIp', default='', max_length=30, verbose_name='执行机服务器的IP')),
                ('servicePort', models.IntegerField(db_column='servicePort', verbose_name='执行机服务器的端口')),
                ('maxTaskProgressNum', models.IntegerField(db_column='maxTaskProgressNum', default=10, verbose_name='当前服务器最大任务进程数')),
                ('maxCaseProgressNum', models.IntegerField(db_column='maxCaseProgressNum', default=10, verbose_name='当前服务器最大调试进程数')),
                ('status', models.IntegerField(db_column='status', verbose_name='当前执行机的状态')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_run_server_conf',
            },
        ),
        migrations.CreateModel(
            name='TbSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sourceName', models.CharField(db_column='sourceName', max_length=25, unique=True, verbose_name='来源名称')),
                ('sourceDesc', models.CharField(db_column='sourceDesc', max_length=2000, verbose_name='来源描述')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '来源',
                'verbose_name_plural': '05来源管理',
                'db_table': 'tb_source',
            },
        ),
        migrations.CreateModel(
            name='TbStandardInterface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fileName', models.CharField(db_column='fileName', default='', max_length=3000, verbose_name='文件名')),
                ('interfaceUrl', models.CharField(db_column='interfaceUrl', default='/', max_length=9999, verbose_name='解析出的标准接口URL')),
                ('interfaceCreateBy', models.CharField(db_column='interfaceCreateBy', default='暂时无法解析', max_length=100, verbose_name='创建者信息')),
                ('interfaceCreateTime', models.DateTimeField(db_column='interfaceCreateTime', default='', verbose_name='创建时间')),
                ('interfaceUpdateBy', models.CharField(db_column='interfaceUpdateBy', default='暂时无法解析', max_length=100, verbose_name='更新者信息')),
                ('interfaceUpdateTime', models.DateTimeField(db_column='interfaceUpdateTime', default='', verbose_name='修改时间')),
                ('authorEmail', models.CharField(db_column='authorEmail', default='暂时无法解析', max_length=200, verbose_name='作者邮箱（用于接收邮件）')),
                ('apiStatus', models.IntegerField(default=1, verbose_name='状态 0废弃 1有效 3不存在接口 4apiStatus状态值错误')),
                ('serviceName', models.CharField(db_column='serviceName', default='', max_length=100, verbose_name='接口所属service')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_standard_interface',
            },
        ),
        migrations.CreateModel(
            name='TbTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=30, unique=True, verbose_name='tag名称')),
                ('usecount', models.IntegerField(default=0, verbose_name='tag数量统计')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_tag',
            },
        ),
        migrations.CreateModel(
            name='TbTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskId', models.CharField(db_column='taskId', max_length=25, unique=True, verbose_name='任务ID')),
                ('title', models.CharField(max_length=100, verbose_name='任务标题')),
                ('taskdesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('protocol', models.CharField(max_length=20, verbose_name='任务协议')),
                ('businessLineGroup', models.CharField(db_column='businessLineGroup', max_length=1000, verbose_name='任务包含的业务线名称，例如 SFA,服务云')),
                ('modulesGroup', models.CharField(db_column='modulesGroup', max_length=1000, verbose_name='任务包含的模块名称，例如 合同,订单')),
                ('sourceGroup', models.CharField(db_column='sourceGroup', default="['电脑Web']", max_length=1000, verbose_name='任务包含的来源名称，例如 IOS 安卓 Web端 所有')),
                ('emailList', models.CharField(db_column='emailList', default='', max_length=2000, verbose_name='发送邮件列表，除却执行人execBy以外的其他收件人')),
                ('taskLevel', models.IntegerField(db_column='taskLevel', default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('highPriorityVARS', models.TextField(db_column='highPriorityVARS', default='', verbose_name='高优先级变量，执行时覆盖同名的变量和全局变量')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('interfaceCount', models.IntegerField(db_column='interfaceCount', verbose_name='任务中的接口数量统计')),
                ('taskInterfaces', models.TextField(db_column='taskInterfaces', verbose_name='任务中的接口列表，多个接口用,间隔，例如 HTTP_INTERFACE_1,HTTP_INTERFACE_2')),
                ('caseCount', models.IntegerField(db_column='caseCount', verbose_name='任务中的用例数量统计')),
                ('taskTestcases', models.TextField(db_column='taskTestcases', verbose_name='任务中的用例列表，多个接口用,间隔，例如 HTTP_TESTCASE_1,HTTP_TESTCASE_2')),
                ('interfaceNum', models.IntegerField(db_column='interfaceNum', verbose_name='任务总的接口数量，包含接口的和用例中的步骤数量')),
                ('isCI', models.IntegerField(db_column='isCI', default=1, verbose_name='是否加入到持续集成  0 不加人  1加入')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', default='', max_length=25, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('addByName', models.CharField(db_column='addByName', default='', max_length=25, verbose_name='创建者姓名')),
                ('modByName', models.CharField(db_column='modByName', default='', max_length=25, verbose_name='修改者姓名')),
            ],
            options={
                'verbose_name': '任务',
                'verbose_name_plural': '11任务',
                'db_table': 'tb_task',
            },
        ),
        migrations.CreateModel(
            name='TbTaskExecute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskId', models.CharField(db_column='taskId', max_length=100, verbose_name='要执行的任务ID')),
                ('title', models.CharField(max_length=100, verbose_name='任务标题')),
                ('taskdesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('protocol', models.CharField(max_length=20, verbose_name='任务协议')),
                ('businessLineGroup', models.CharField(db_column='businessLineGroup', max_length=1000, verbose_name='任务包含的业务线名称，例如 SFA,服务云')),
                ('modulesGroup', models.CharField(db_column='modulesGroup', max_length=1000, verbose_name='任务包含的模块名称，例如 合同,订单')),
                ('sourceGroup', models.CharField(db_column='sourceGroup', default="['电脑Web']", max_length=1000, verbose_name='任务包含的来源名称，例如 IOS 安卓 Web端 所有')),
                ('taskLevel', models.IntegerField(db_column='taskLevel', default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('highPriorityVARS', models.TextField(db_column='highPriorityVARS', default='', verbose_name='高优先级变量，执行时覆盖同名的变量和全局变量')),
                ('interfaceCount', models.IntegerField(db_column='interfaceCount', verbose_name='任务中的接口数量统计')),
                ('taskInterfaces', models.TextField(db_column='taskInterfaces', verbose_name='任务中的接口列表，多个接口用,间隔，例如 HTTP_INTERFACE_1,HTTP_INTERFACE_2')),
                ('caseCount', models.IntegerField(db_column='caseCount', verbose_name='任务中的用例数量统计')),
                ('taskTestcases', models.TextField(db_column='taskTestcases', verbose_name='任务中的用例列表，多个接口用,间隔，例如 HTTP_TESTCASE_1,HTTP_TESTCASE_2')),
                ('interfaceNum', models.IntegerField(db_column='interfaceNum', verbose_name='任务总的接口数量，包含接口的和用例中的步骤数量')),
                ('isCI', models.IntegerField(db_column='isCI', default=1, verbose_name='是否加入到持续集成  0 不加人  1加入')),
                ('caseLevel', models.IntegerField(db_column='caseLevel', default=100, verbose_name='执行时选择的执行优先级，如果选择了，那么只有同等优先级的case会执行，0高 5中 9低')),
                ('isSendEmail', models.IntegerField(db_column='isSendEmail', default=0, verbose_name='是否发送邮件[是否发送:是否带附件:PASS是否发送:FAIL是否发送:ERROR是否发送:EXCEPTION是否发送]0的时候不发送，1开头的时候依次往后判断即可后面没有的都是1，例如11标识发送带附件所有情况都发送10标识发送不带附件所有情况都发送100标识发送不带附件成功不发送其他情况发送')),
                ('emailList', models.CharField(db_column='emailList', default='', max_length=2000, verbose_name='发送邮件列表，除却执行人execBy以外的其他收件人')),
                ('isCodeRate', models.IntegerField(db_column='isCodeRate', default=0, verbose_name='是否生成代码覆盖率 1生成 0不生成')),
                ('isSaveHistory', models.IntegerField(db_column='isSaveHistory', default=0, verbose_name='是否保存到历史记录 1保存 0不保存')),
                ('execComments', models.CharField(db_column='execComments', max_length=400, verbose_name='执行备注信息')),
                ('retryCount', models.IntegerField(db_column='retryCount', default=0, verbose_name='重试次数，默认0，不重试')),
                ('execType', models.IntegerField(blank=True, db_column='execType', default=1, verbose_name='执行类型，1立即执行 2定时执行 3周期执行')),
                ('execTime', models.DateTimeField(db_column='execTime', default='2000-01-01 00:00:01', verbose_name='执行开始时间，默认当前时间')),
                ('execFinishTime', models.DateTimeField(db_column='execFinishTime', default='2000-01-01 00:00:01', verbose_name='执行结束时间')),
                ('execTakeTime', models.IntegerField(db_column='execTakeTime', default=0, verbose_name='执行耗时')),
                ('execStatus', models.IntegerField(db_column='execStatus', default=1, verbose_name='执行状态: NOTRUN = 1 RUNNING = 2 DONE = 3 EXCEPTION = 4 CANCELING = 10 CANCELED = 11')),
                ('execProgressData', models.CharField(db_column='execProgressData', default='0:0:0:0:0', max_length=30, verbose_name='执行进度数据，格式：ALL:PASS:FAIL:ERROR:NOTRUN，例如任务有10个用例，10:3:1:0:6,代表总共10个，通过3个，失败1个，错误0个，未执行6个。')),
                ('execPlatform', models.IntegerField(db_column='execPlatform', default=1, verbose_name='调用接口的平台，1代表测试平台，2代表jenkins，100代表其他')),
                ('execLevel', models.IntegerField(db_column='execLevel', default=5, verbose_name='优先级 5默认 数字越小优先级越高 范围1-10')),
                ('testResult', models.CharField(db_column='testResult', default='NOTRUN', max_length=20, verbose_name='测试结果 根据断言结果生成的测试结果 PASS/FAIL/ERROR/EXCEPTION/CANCEL')),
                ('testResultMsg', models.TextField(db_column='testResultMsg', verbose_name='任务执行的统计信息,详细统计，json字符串形式保存。')),
                ('testReportUrl', models.CharField(db_column='testReportUrl', max_length=200, verbose_name='测试报告链接')),
                ('performanceResult', models.CharField(db_column='performanceResult', default='N/A', max_length=20, verbose_name='性能测试结果 根据性能时间生成的测试结果 PASS/FAIL/  N/A')),
                ('taskSuiteExecuteId', models.IntegerField(db_column='taskSuiteExecuteId', default='0', verbose_name='任务集执行Id')),
                ('version', models.CharField(db_column='version', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', default='', max_length=25, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('addByName', models.CharField(db_column='addByName', default='', max_length=25, verbose_name='创建者姓名')),
                ('modByName', models.CharField(db_column='modByName', default='', max_length=25, verbose_name='修改者姓名')),
                ('execByName', models.CharField(db_column='execByName', default='', max_length=25, verbose_name='执行者姓名')),
                ('httpConfKeyAlias', models.CharField(db_column='httpConfKeyAlias', default='', max_length=200, verbose_name='执行环境别名')),
            ],
            options={
                'verbose_name': '任务执行',
                'verbose_name_plural': '11任务执行',
                'db_table': 'tb_task_execute',
            },
        ),
        migrations.CreateModel(
            name='TbTaskSuite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskSuiteId', models.CharField(db_column='taskSuiteId', max_length=25, unique=True, verbose_name='任务ID')),
                ('title', models.CharField(db_column='title', max_length=100, verbose_name='任务集标题')),
                ('taskSuiteDesc', models.CharField(db_column='taskSuiteDesc', max_length=1000, verbose_name='任务集描述')),
                ('protocol', models.CharField(db_column='protocol', max_length=20, verbose_name='任务集协议')),
                ('emailList', models.CharField(db_column='emailList', default='', max_length=2000, verbose_name='发送邮件列表，除却执行人execBy以外的其他收件人')),
                ('status', models.IntegerField(db_column='status', default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('taskCount', models.IntegerField(db_column='taskCount', verbose_name='任务集中的任务列表')),
                ('taskList', models.TextField(db_column='taskList', verbose_name='任务集中的任务列表')),
                ('isCI', models.IntegerField(db_column='isCI', default=0, verbose_name='是否加入到持续集成  0 不加人  1加入')),
                ('state', models.IntegerField(db_column='state', default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '任务集',
                'db_table': 'tb_task_suite',
            },
        ),
        migrations.CreateModel(
            name='TbTaskSuiteExecute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskSuiteId', models.CharField(db_column='taskSuiteId', max_length=25, verbose_name='任务ID')),
                ('title', models.CharField(db_column='title', max_length=100, verbose_name='任务标题')),
                ('taskSuiteDesc', models.CharField(db_column='taskSuiteDesc', max_length=1000, verbose_name='任务描述')),
                ('protocol', models.CharField(db_column='protocol', max_length=20, verbose_name='任务协议')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('taskCount', models.IntegerField(db_column='taskCount', verbose_name='任务集中的任务列表')),
                ('taskList', models.TextField(db_column='taskList', verbose_name='任务集中的任务列表')),
                ('isCI', models.IntegerField(db_column='isCI', default=0, verbose_name='是否加入到持续集成  0 不加人  1加入')),
                ('httpConfKeyList', models.CharField(db_column='httpConfKeyList', max_length=300, verbose_name='任务集包含的执行环境')),
                ('httpConfKeyAliasList', models.CharField(db_column='httpConfKeyAliasList', max_length=300, verbose_name='任务集包含的执行环境名称')),
                ('caseLevel', models.IntegerField(db_column='caseLevel', default=100, verbose_name='执行时选择的执行优先级，如果选择了，那么只有同等优先级的case会执行，0高 5中 9低')),
                ('isSendEmail', models.IntegerField(db_column='isSendEmail', default=0, verbose_name='是否发送邮件[是否发送:是否带附件:PASS是否发送:FAIL是否发送:ERROR是否发送:EXCEPTION是否发送]0的时候不发送，1开头的时候依次往后判断即可后面没有的都是1，例如11标识发送带附件所有情况都发送10标识发送不带附件所有情况都发送100标识发送不带附件成功不发送其他情况发送')),
                ('emailList', models.CharField(db_column='emailList', default='', max_length=2000, verbose_name='发送邮件列表，除却执行人execBy以外的其他收件人')),
                ('isCodeRate', models.IntegerField(db_column='isCodeRate', default=0, verbose_name='是否生成代码覆盖率 1生成 0不生成')),
                ('isSaveHistory', models.IntegerField(db_column='isSaveHistory', default=0, verbose_name='是否保存到历史记录 1保存 0不保存')),
                ('execComments', models.CharField(db_column='execComments', max_length=400, verbose_name='执行备注信息')),
                ('execType', models.IntegerField(blank=True, db_column='execType', default=1, verbose_name='执行类型，1立即执行 2定时执行 3周期执行')),
                ('execTime', models.DateTimeField(db_column='execTime', default='2000-01-01 00:00:01', verbose_name='执行开始时间，默认当前时间')),
                ('execFinishTime', models.DateTimeField(db_column='execFinishTime', default='2000-01-01 00:00:01', verbose_name='执行结束时间')),
                ('execTakeTime', models.IntegerField(db_column='execTakeTime', default=0, verbose_name='执行耗时')),
                ('execBy', models.CharField(db_column='execBy', default='', max_length=30, verbose_name='执行人登录用户名')),
                ('execStatus', models.IntegerField(db_column='execStatus', default=1, verbose_name='执行状态: NOTRUN = 1 RUNNING = 2 DONE = 3 EXCEPTION = 4 CANCELING = 10 CANCELED = 11')),
                ('execProgressData', models.CharField(db_column='execProgressData', default='0:0:0:0:0', max_length=30, verbose_name='执行进度数据，格式：ALL:PASS:FAIL:ERROR:NOTRUN，例如任务有10个用例，10:3:1:0:6,代表总共10个，通过3个，失败1个，错误0个，未执行6个。  ')),
                ('execPlatform', models.IntegerField(db_column='execPlatform', default=1, verbose_name='调用接口的平台，1代表测试平台，2代表jenkins，100代表其他')),
                ('execLevel', models.IntegerField(db_column='execLevel', default=5, verbose_name='优先级 5默认 数字越小优先级越高 范围1-10')),
                ('testResult', models.CharField(db_column='testResult', default='NOTRUN', max_length=20, verbose_name='测试结果 根据断言结果生成的测试结果 PASS/FAIL/ERROR/EXCEPTION/CANCEL')),
                ('testResultMsg', models.TextField(db_column='testResultMsg', verbose_name='任务执行的统计信息,详细统计，json字符串形式保存。')),
                ('testReportUrl', models.CharField(db_column='testReportUrl', max_length=200, verbose_name='测试报告链接')),
                ('taskExecuteIdList', models.TextField(db_column='taskExecuteIdList', default='', verbose_name='本次任务执行包含的任务执行Id')),
                ('version', models.CharField(db_column='version', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('retryCount', models.IntegerField(db_column='retryCount', default=0, verbose_name='重试次数，默认0，不重试')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_task_suite_execute',
            },
        ),
        migrations.CreateModel(
            name='TbTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teamName', models.CharField(db_column='teamName', max_length=100, unique=True, verbose_name='小组名称')),
                ('teamDesc', models.CharField(db_column='teamDesc', max_length=100, verbose_name='小组描述')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_team',
            },
        ),
        migrations.CreateModel(
            name='TbTeamPermissionRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teamName', models.CharField(db_column='teamName', max_length=100, verbose_name='小组名称')),
                ('permissionName', models.CharField(db_column='permissionName', max_length=100, verbose_name='权限名称')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_team_permission_relation',
            },
        ),
        migrations.CreateModel(
            name='TbUiAutoUploadPackage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appType', models.CharField(db_column='appType', default='', max_length=300, verbose_name='appType Android or ios')),
                ('uploadResult', models.IntegerField(db_column='uploadResult', default=1, verbose_name='上传成功1 失败2')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_auto_upload_package',
            },
        ),
        migrations.CreateModel(
            name='TbUiFunctions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commonFuncKey', models.CharField(db_column='commonFuncKey', max_length=100, verbose_name='commonFuncKey,中英文数字下划线组合')),
                ('commonFuncTitle', models.CharField(db_column='commonFuncTitle', max_length=500, verbose_name='标题')),
                ('commonFuncDesc', models.CharField(db_column='commonFuncDesc', max_length=5000, verbose_name='描述')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_functions',
            },
        ),
        migrations.CreateModel(
            name='TbUiFunctionsTestcase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commonFuncKey', models.CharField(db_column='commonFuncKey', max_length=100, verbose_name='commonFuncKey,中英文数字下划线组合')),
                ('functionName', models.CharField(db_column='functionName', default='', max_length=25, verbose_name='funcName')),
                ('title', models.CharField(max_length=100, verbose_name='用例标题')),
                ('casedesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('businessLineId', models.IntegerField(db_column='businessLineId', default=1, verbose_name='业务线Id')),
                ('moduleId', models.IntegerField(db_column='moduleId', default=1, verbose_name='模块Id')),
                ('sourceId', models.IntegerField(db_column='sourceId', default=1, verbose_name='来源Id')),
                ('caseLevel', models.IntegerField(db_column='caseLevel', default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_functions_testcase',
            },
        ),
        migrations.CreateModel(
            name='TbUiFunctionsTestcaseStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commonFuncKey', models.CharField(db_column='commonFuncKey', max_length=100, verbose_name='commonFuncKey,中英文数字下划线组合')),
                ('functionName', models.CharField(db_column='functionName', default='', max_length=25, verbose_name='funcName')),
                ('stepNum', models.IntegerField(db_column='stepNum', default=1, verbose_name='步骤编号，一个用例是从1开始递增')),
                ('stepTitle', models.CharField(db_column='stepTitle', default='', max_length=200, verbose_name='标题')),
                ('stepDesc', models.CharField(db_column='stepDesc', default='', max_length=2000, verbose_name='描述')),
                ('specialTag', models.CharField(db_column='specialTag', default='', max_length=25, verbose_name='特殊标记')),
                ('operate', models.CharField(db_column='operate', default='', max_length=100, verbose_name='操作关键字')),
                ('params', models.TextField(db_column='params', default='', verbose_name='参数')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_functions_testcase_step',
            },
        ),
        migrations.CreateModel(
            name='TbUiGlobalText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('textDesc', models.CharField(db_column='textDesc', default='', max_length=5000, verbose_name='详情')),
                ('textKey', models.CharField(db_column='textKey', max_length=100, unique=True, verbose_name='文本key,中英文数字下划线组合')),
                ('textValue', models.TextField(db_column='textValue', verbose_name='文本value')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_global_text',
            },
        ),
        migrations.CreateModel(
            name='TbUiGlobalVars',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('varDesc', models.CharField(db_column='varDesc', max_length=5000, verbose_name='详情')),
                ('varKey', models.CharField(db_column='varKey', max_length=100, unique=True, verbose_name='全局变量key,中英文数字下划线组合')),
                ('varValue', models.TextField(db_column='varValue', verbose_name='全局变量value')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_global_vars',
            },
        ),
        migrations.CreateModel(
            name='TbUiMobileServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serverName', models.CharField(db_column='serverName', default='', max_length=30, unique=True, verbose_name='appium服务的名称')),
                ('serverDesc', models.CharField(db_column='serverDesc', default='', max_length=100, verbose_name='appium服务的描述')),
                ('serverType', models.IntegerField(db_column='serverType', default=1, verbose_name='服务类型，1Android、2iphone')),
                ('status', models.IntegerField(db_column='status', default=0, verbose_name='当前server有没有被使用')),
                ('executeTaskId', models.CharField(blank=True, db_column='executeTaskId', default='', max_length=30, null=True, verbose_name='当前使用本服务的任务')),
                ('serverIp', models.CharField(db_column='serverIp', default='', max_length=30, verbose_name='当前使用本服务ip地址')),
                ('serverPort', models.CharField(db_column='serverPort', default='', max_length=30, verbose_name='当前使用本服务端口')),
                ('udid', models.CharField(db_column='udid', default='', max_length=100, verbose_name='服务对应的设备udid')),
                ('deviceName', models.CharField(db_column='deviceName', default='', max_length=100, verbose_name='服务对应的设备deviceName')),
                ('wdaLocalPort', models.IntegerField(db_column='wdaLocalPort', default=8000, verbose_name='ios用到的webDriverAgen的端口，对应wdaLocalPort  参数')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': 'ui移动端服务',
                'verbose_name_plural': '40ui移动端服务表',
                'db_table': 'tb_ui_mobile_server',
            },
        ),
        migrations.CreateModel(
            name='TbUIMobileServerLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceName', models.CharField(db_column='serviceName', max_length=30, verbose_name='appium的服务名称')),
                ('executeTaskId', models.CharField(db_column='executeTaskId', default='', max_length=30, verbose_name='当前使用本服务的任务')),
                ('executeBy', models.CharField(blank=True, db_column='executeBy', max_length=25, null=True, verbose_name='执行者登录名')),
                ('startTime', models.DateTimeField(db_column='startTime', default=django.utils.timezone.now, verbose_name='任务使用服务的开始时间')),
                ('endTime', models.DateTimeField(db_column='endTime', default=django.utils.timezone.now, verbose_name='任务使用服务的结束时间')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
            ],
            options={
                'verbose_name': 'ui服务log',
                'verbose_name_plural': '41ui移动端服务表Log',
                'db_table': 'tb_ui_mobile_server_log',
            },
        ),
        migrations.CreateModel(
            name='TbUiPackage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('packageId', models.CharField(db_column='packageId', default='', max_length=25, unique=True, verbose_name='包ID')),
                ('title', models.CharField(db_column='title', max_length=100, verbose_name='标题')),
                ('packageDesc', models.CharField(db_column='packageDesc', max_length=1000, verbose_name='描述')),
                ('packageType', models.IntegerField(db_column='packageType', default=1, verbose_name='包类型，1-安卓 2-iPhone 3-iPad ')),
                ('appFileName', models.CharField(db_column='appFileName', max_length=300, verbose_name='包文件名(android/ios)')),
                ('appPackage', models.CharField(db_column='appPackage', default='', max_length=300, verbose_name='appPackage(Android)')),
                ('appActivity', models.CharField(db_column='appActivity', default='', max_length=300, verbose_name='appActivity(Android)')),
                ('bundleId', models.CharField(db_column='bundleId', default='', max_length=300, verbose_name='bundleId(iOS)')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_package',
            },
        ),
        migrations.CreateModel(
            name='TbUiPageObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('poKey', models.CharField(db_column='poKey', max_length=100, unique=True, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('poTitle', models.CharField(db_column='poTitle', max_length=200, verbose_name='标题')),
                ('poDesc', models.CharField(db_column='poDesc', max_length=5000, verbose_name='详情')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_page_object',
            },
        ),
        migrations.CreateModel(
            name='TbUiPageObjectElements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('poKey', models.CharField(db_column='poKey', max_length=100, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('elementTitle', models.CharField(db_column='poTitle', max_length=200, verbose_name='标题')),
                ('elementDesc', models.CharField(db_column='poDesc', max_length=5000, verbose_name='详情')),
                ('elementKey', models.CharField(db_column='elementKey', max_length=100, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('elementType', models.CharField(db_column='elementType', max_length=50, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('elementValue', models.CharField(db_column='elementValue', max_length=5000, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_page_object_elements',
            },
        ),
        migrations.CreateModel(
            name='TbUiTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskId', models.CharField(db_column='taskId', max_length=25, unique=True, verbose_name='任务ID')),
                ('title', models.CharField(max_length=100, verbose_name='任务标题')),
                ('taskdesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('businessLineGroup', models.CharField(db_column='businessLineGroup', max_length=1000, verbose_name='任务包含的业务线名称，例如 SFA,服务云')),
                ('modulesGroup', models.CharField(db_column='modulesGroup', max_length=1000, verbose_name='任务包含的模块名称，例如 合同,订单')),
                ('sourceGroup', models.CharField(db_column='sourceGroup', default="['电脑Web']", max_length=1000, verbose_name='任务包含的来源名称，例如 IOS 安卓 Web端 所有')),
                ('tasklevel', models.IntegerField(default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('caseCount', models.IntegerField(db_column='caseCount', verbose_name='任务中的用例数量统计')),
                ('taskTestcases', models.TextField(db_column='taskTestcases', verbose_name='任务中的用例列表，多个接口用,间隔，例如 UI_TESTCASE_1,UI_TESTCASE_2')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_task',
            },
        ),
        migrations.CreateModel(
            name='TbUiTaskExecute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskId', models.CharField(db_column='taskId', max_length=25, unique=True, verbose_name='任务ID')),
                ('title', models.CharField(max_length=100, verbose_name='任务标题')),
                ('taskdesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('businessLineGroup', models.CharField(db_column='businessLineGroup', max_length=1000, verbose_name='任务包含的业务线名称，例如 SFA,服务云')),
                ('modulesGroup', models.CharField(db_column='modulesGroup', max_length=1000, verbose_name='任务包含的模块名称，例如 合同,订单')),
                ('sourceGroup', models.CharField(db_column='sourceGroup', default="['电脑Web']", max_length=1000, verbose_name='任务包含的来源名称，例如 IOS 安卓 Web端 所有')),
                ('tasklevel', models.IntegerField(default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('caseCount', models.IntegerField(db_column='caseCount', verbose_name='任务中的用例数量统计')),
                ('taskTestcases', models.TextField(db_column='taskTestcases', verbose_name='任务中的用例列表，多个接口用,间隔，例如 HTTP_TESTCASE_1,HTTP_TESTCASE_2')),
                ('taskExcelFileName', models.CharField(db_column='taskExcelFileName', max_length=200, verbose_name='任务生成的excel')),
                ('taskExcelFileGenerateTime', models.DateTimeField(db_column='taskExcelFileGenerateTime', verbose_name='任务生成的excel的生成时间')),
                ('httpConfKey', models.CharField(db_column='httpConfKey', default='', max_length=300, verbose_name='执行环境的httpConfKey')),
                ('reportDir', models.CharField(db_column='reportDir', max_length=100, verbose_name='测试报告路径')),
                ('packageId', models.CharField(db_column='packageId', default='', max_length=25, verbose_name='包ID')),
                ('execStatus', models.IntegerField(db_column='execStatus', default=1, verbose_name='执行状态: NOTRUN = 1 RUNNING = 2 DONE = 3 EXCEPTION = 4 CANCELING = 10 CANCELED = 11')),
                ('execCommand', models.CharField(db_column='execCommand', default='', max_length=5000, verbose_name='执行命令')),
                ('execStartTime', models.DateTimeField(db_column='execStartTime', default='2018-02-01 00:00:00', verbose_name='执行开始时间')),
                ('execEndTime', models.DateTimeField(db_column='execEndTime', default='2018-02-01 00:00:00', verbose_name='执行结束时间')),
                ('execTakeTime', models.CharField(db_column='execTakeTime', default='0', max_length=100, verbose_name='执行使用时间')),
                ('execProgressString', models.TextField(db_column='execProgressString', verbose_name='执行进度信息')),
                ('execComments', models.CharField(db_column='execComments', default='', max_length=400, verbose_name='执行备注信息')),
                ('isSendEmail', models.IntegerField(db_column='isSendEmail', default=0, verbose_name='是否发送邮件[是否发送:是否带附件:PASS是否发送:FAIL是否发送:ERROR是否发送:EXCEPTION是否发送]0的时候不发送，1开头的时候依次往后判断即可后面没有的都是1，例如11标识发送带附件所有情况都发送10标识发送不带附件所有情况都发送100标识发送不带附件成功不发送其他情况发送')),
                ('emailList', models.CharField(db_column='emailList', default='', max_length=2000, verbose_name='发送邮件列表，除却执行人execBy以外的其他收件人')),
                ('testResult', models.CharField(db_column='testResult', default='', max_length=300, verbose_name='测试结果')),
                ('testResultMessage', models.TextField(db_column='testResultMessage', default='', verbose_name='测试结果详情')),
                ('version', models.CharField(db_column='version', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': 'UI任务执行',
                'verbose_name_plural': '11UI任务执行',
                'db_table': 'tb_ui_task_execute',
            },
        ),
        migrations.CreateModel(
            name='TbUiTaskSimple',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskId', models.CharField(db_column='taskId', default='', max_length=25, unique=True, verbose_name='任务ID')),
                ('title', models.CharField(max_length=100, verbose_name='任务标题')),
                ('taskdesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('businessLineId', models.IntegerField(db_column='businessLineId', default=1, verbose_name='businessLineId')),
                ('moduleId', models.IntegerField(db_column='moduleId', default=1, verbose_name='模块Id')),
                ('sourceGroup', models.CharField(db_column='sourceGroup', default="['电脑Web']", max_length=1000, verbose_name='任务包含的来源名称，例如 IOS 安卓 Web端 所有')),
                ('tasklevel', models.IntegerField(default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('emailList', models.CharField(db_column='emailList', default='', max_length=2000, verbose_name='发送邮件列表，除却执行人execBy以外的其他收件人')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('fileName', models.CharField(db_column='fileName', max_length=300, verbose_name='文件名称')),
                ('sheetName', models.CharField(db_column='sheetName', default='', max_length=300, verbose_name='执行的表单')),
                ('fileAddBy', models.CharField(db_column='fileAddBy', max_length=100, verbose_name='文件添加人')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_task_simple',
            },
        ),
        migrations.CreateModel(
            name='TbUiTestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caseId', models.CharField(db_column='caseId', default='', max_length=25, unique=True, verbose_name='用例ID')),
                ('title', models.CharField(max_length=100, verbose_name='用例标题')),
                ('casedesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('businessLineId', models.IntegerField(db_column='businessLineId', default=1, verbose_name='业务线Id')),
                ('moduleId', models.IntegerField(db_column='moduleId', default=1, verbose_name='模块Id')),
                ('sourceId', models.IntegerField(db_column='sourceId', default=1, verbose_name='来源Id')),
                ('caseLevel', models.IntegerField(db_column='caseLevel', default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_testcase',
            },
        ),
        migrations.CreateModel(
            name='TbUiTestCaseStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caseId', models.CharField(db_column='caseId', default='', max_length=25, verbose_name='用例ID')),
                ('stepNum', models.IntegerField(db_column='stepNum', default=1, verbose_name='步骤编号，一个用例是从1开始递增')),
                ('stepTitle', models.CharField(db_column='stepTitle', default='', max_length=200, verbose_name='标题')),
                ('stepDesc', models.CharField(db_column='stepDesc', default='', max_length=2000, verbose_name='描述')),
                ('specialTag', models.CharField(db_column='specialTag', default='', max_length=25, verbose_name='特殊标记')),
                ('operate', models.CharField(db_column='operate', default='', max_length=100, verbose_name='操作关键字')),
                ('params', models.TextField(db_column='params', default='', verbose_name='参数')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_testcase_step',
            },
        ),
        migrations.CreateModel(
            name='TbUITestExcel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fileName', models.CharField(db_column='fileName', max_length=300, verbose_name='文件名称')),
                ('sheetNames', models.CharField(db_column='sheetNames', default='', max_length=500, verbose_name='文件包含的表单')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_test_excel',
            },
        ),
        migrations.CreateModel(
            name='TbUITestExecute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskId', models.CharField(db_column='taskId', default='', max_length=25, verbose_name='任务ID')),
                ('title', models.CharField(default='', max_length=100, verbose_name='任务标题')),
                ('taskdesc', models.CharField(default='', max_length=1000, verbose_name='任务描述')),
                ('businessLineId', models.IntegerField(db_column='businessLineId', default=1, verbose_name='businessLineId')),
                ('moduleId', models.IntegerField(db_column='moduleId', default=1, verbose_name='模块Id')),
                ('sourceGroup', models.CharField(db_column='sourceGroup', default="['电脑Web']", max_length=1000, verbose_name='任务包含的来源名称，例如 IOS 安卓 Web端 所有')),
                ('tasklevel', models.IntegerField(default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('fileName', models.CharField(db_column='fileName', max_length=300, verbose_name='文件名称')),
                ('sheetName', models.CharField(db_column='sheetName', default='', max_length=300, verbose_name='执行的表单')),
                ('fileAddBy', models.CharField(db_column='fileAddBy', max_length=100, verbose_name='文件添加人')),
                ('httpConfKey', models.CharField(db_column='httpConfKey', default='', max_length=300, verbose_name='执行环境的httpConfKey')),
                ('reportDir', models.CharField(db_column='reportDir', max_length=100, verbose_name='测试报告路径')),
                ('packageId', models.CharField(db_column='packageId', default='', max_length=25, verbose_name='包ID')),
                ('serverId', models.IntegerField(db_column='serverId', default=0, verbose_name='执行本次的appium服务ia')),
                ('execStatus', models.IntegerField(db_column='execStatus', default=1, verbose_name='执行状态: NOTRUN = 1 RUNNING = 2 DONE = 3 EXCEPTION = 4 CANCELING = 10 CANCELED = 11')),
                ('execCommand', models.CharField(db_column='execCommand', default='', max_length=5000, verbose_name='执行命令')),
                ('execStartTime', models.DateTimeField(db_column='execStartTime', default='2018-02-01 00:00:00', verbose_name='执行开始时间')),
                ('execEndTime', models.DateTimeField(db_column='execEndTime', default='2018-02-01 00:00:00', verbose_name='执行结束时间')),
                ('execTakeTime', models.CharField(db_column='execTakeTime', default='0', max_length=100, verbose_name='执行使用时间')),
                ('execProgressString', models.TextField(db_column='execProgressString', verbose_name='执行进度信息')),
                ('execComments', models.CharField(db_column='execComments', default='', max_length=400, verbose_name='执行备注信息')),
                ('isSendEmail', models.IntegerField(db_column='isSendEmail', default=0, verbose_name='是否发送邮件[是否发送:是否带附件:PASS是否发送:FAIL是否发送:ERROR是否发送:EXCEPTION是否发送]0的时候不发送，1开头的时候依次往后判断即可后面没有的都是1，例如11标识发送带附件所有情况都发送10标识发送不带附件所有情况都发送100标识发送不带附件成功不发送其他情况发送')),
                ('emailList', models.CharField(db_column='emailList', default='', max_length=2000, verbose_name='发送邮件列表，除却执行人execBy以外的其他收件人')),
                ('testResult', models.CharField(db_column='testResult', default='', max_length=300, verbose_name='测试结果')),
                ('testResultMessage', models.TextField(db_column='testResultMessage', default='', verbose_name='测试结果详情')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_test_execute',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionFunctions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('commonFuncKey', models.CharField(db_column='commonFuncKey', max_length=100, verbose_name='commonFuncKey,中英文数字下划线组合')),
                ('commonFuncTitle', models.CharField(db_column='commonFuncTitle', max_length=500, verbose_name='标题')),
                ('commonFuncDesc', models.CharField(db_column='commonFuncDesc', max_length=5000, verbose_name='描述')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_functions',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionFunctionsTestcase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('commonFuncKey', models.CharField(db_column='commonFuncKey', max_length=100, verbose_name='commonFuncKey,中英文数字下划线组合')),
                ('functionName', models.CharField(db_column='functionName', default='', max_length=25, verbose_name='funcName')),
                ('title', models.CharField(max_length=100, verbose_name='用例标题')),
                ('casedesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('businessLineId', models.IntegerField(db_column='businessLineId', default=1, verbose_name='业务线Id')),
                ('moduleId', models.IntegerField(db_column='moduleId', default=1, verbose_name='模块Id')),
                ('sourceId', models.IntegerField(db_column='sourceId', default=1, verbose_name='来源Id')),
                ('caseLevel', models.IntegerField(db_column='caseLevel', default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_functions_testcase',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionFunctionsTestcaseStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('commonFuncKey', models.CharField(db_column='commonFuncKey', max_length=100, verbose_name='commonFuncKey,中英文数字下划线组合')),
                ('functionName', models.CharField(db_column='functionName', default='', max_length=25, verbose_name='funcName')),
                ('stepNum', models.IntegerField(db_column='stepNum', default=1, verbose_name='步骤编号，一个用例是从1开始递增')),
                ('stepTitle', models.CharField(db_column='stepTitle', default='', max_length=200, verbose_name='标题')),
                ('stepDesc', models.CharField(db_column='stepDesc', default='', max_length=2000, verbose_name='描述')),
                ('specialTag', models.CharField(db_column='specialTag', default='', max_length=25, verbose_name='特殊标记')),
                ('operate', models.CharField(db_column='operate', default='', max_length=100, verbose_name='操作关键字')),
                ('params', models.TextField(db_column='params', default='', verbose_name='参数')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_functions_testcase_step',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionGlobalText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('textDesc', models.CharField(db_column='textDesc', default='', max_length=5000, verbose_name='详情')),
                ('textKey', models.CharField(db_column='textKey', max_length=100, verbose_name='文本key,中英文数字下划线组合')),
                ('textValue', models.TextField(db_column='textValue', verbose_name='文本value')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_global_text',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionGlobalVars',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('varDesc', models.CharField(db_column='varDesc', max_length=5000, verbose_name='详情')),
                ('varKey', models.CharField(db_column='varKey', max_length=100, verbose_name='全局变量key,中英文数字下划线组合')),
                ('varValue', models.TextField(db_column='varValue', verbose_name='全局变量value')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_global_vars',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionPageObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('poKey', models.CharField(db_column='poKey', max_length=100, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('poTitle', models.CharField(db_column='poTitle', max_length=200, verbose_name='标题')),
                ('poDesc', models.CharField(db_column='poDesc', max_length=5000, verbose_name='详情')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_page_object',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionPageObjectElements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('poKey', models.CharField(db_column='poKey', max_length=100, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('elementTitle', models.CharField(db_column='poTitle', max_length=200, verbose_name='标题')),
                ('elementDesc', models.CharField(db_column='poDesc', max_length=5000, verbose_name='详情')),
                ('elementKey', models.CharField(db_column='elementKey', max_length=100, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('elementType', models.CharField(db_column='elementType', max_length=50, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('elementValue', models.CharField(db_column='elementValue', max_length=5000, verbose_name='PageObjectKey,中英文数字下划线组合')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_page_object_elements',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('taskId', models.CharField(db_column='taskId', max_length=25, verbose_name='任务ID')),
                ('title', models.CharField(max_length=100, verbose_name='任务标题')),
                ('taskdesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('businessLineGroup', models.CharField(db_column='businessLineGroup', max_length=1000, verbose_name='任务包含的业务线名称，例如 SFA,服务云')),
                ('modulesGroup', models.CharField(db_column='modulesGroup', max_length=1000, verbose_name='任务包含的模块名称，例如 合同,订单')),
                ('sourceGroup', models.CharField(db_column='sourceGroup', default="['电脑Web']", max_length=1000, verbose_name='任务包含的来源名称，例如 IOS 安卓 Web端 所有')),
                ('tasklevel', models.IntegerField(default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('caseCount', models.IntegerField(db_column='caseCount', verbose_name='任务中的用例数量统计')),
                ('taskTestcases', models.TextField(db_column='taskTestcases', verbose_name='任务中的用例列表，多个接口用,间隔，例如 UI_TESTCASE_1,UI_TESTCASE_2')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_task',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionTestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('caseId', models.CharField(db_column='caseId', default='', max_length=25, verbose_name='用例ID')),
                ('title', models.CharField(max_length=100, verbose_name='用例标题')),
                ('casedesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('businessLineId', models.IntegerField(db_column='businessLineId', default=1, verbose_name='业务线Id')),
                ('moduleId', models.IntegerField(db_column='moduleId', default=1, verbose_name='模块Id')),
                ('sourceId', models.IntegerField(db_column='sourceId', default=1, verbose_name='来源Id')),
                ('caseLevel', models.IntegerField(db_column='caseLevel', default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_testcase',
            },
        ),
        migrations.CreateModel(
            name='TbUiVersionTestCaseStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', default='CurrentVersion', max_length=25, verbose_name='执行的版本')),
                ('caseId', models.CharField(db_column='caseId', default='', max_length=25, verbose_name='用例ID')),
                ('stepNum', models.IntegerField(db_column='stepNum', default=1, verbose_name='步骤编号，一个用例是从1开始递增')),
                ('stepTitle', models.CharField(db_column='stepTitle', default='', max_length=200, verbose_name='标题')),
                ('stepDesc', models.CharField(db_column='stepDesc', default='', max_length=2000, verbose_name='描述')),
                ('specialTag', models.CharField(db_column='specialTag', default='', max_length=25, verbose_name='特殊标记')),
                ('operate', models.CharField(db_column='operate', default='', max_length=100, verbose_name='操作关键字')),
                ('params', models.TextField(db_column='params', default='', verbose_name='参数')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_ui_version_testcase_step',
            },
        ),
        migrations.CreateModel(
            name='TbUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginName', models.CharField(db_column='loginName', max_length=20, unique=True, verbose_name='登录账号')),
                ('email', models.CharField(max_length=50, verbose_name='用户邮箱')),
                ('userName', models.CharField(db_column='userName', max_length=10, verbose_name='用户姓名')),
                ('pwd', models.CharField(default='e10adc3949ba59abbe56e057f20f883e', max_length=100, verbose_name='登录密码')),
                ('token', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='用户生成的token信息')),
                ('type', models.IntegerField(choices=[(0, '未选择'), (1, '开发人员'), (2, '测试人员')], default=1, verbose_name='用户类型 0未选择 1开发人员 2测试人员')),
                ('audit', models.IntegerField(choices=[(0, '0未审核'), (1, '1审核中'), (2, '2通过'), (3, '3未通过')], default=2, verbose_name='审核状态 0未审核 1审核中 2通过 3未通过')),
                ('defaultPermission', models.IntegerField(default=1, verbose_name='是否具有默认权限 1 有 2 无')),
                ('language', models.CharField(choices=[('cn', '中文简体'), ('en', '英语')], default='cn', max_length=10, verbose_name='用户显示语言cn或者en')),
                ('state', models.IntegerField(choices=[(0, '已删除'), (1, '有效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '01用户管理',
                'db_table': 'tb_user',
            },
        ),
        migrations.CreateModel(
            name='TbUserChangeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginName', models.CharField(db_column='loginName', max_length=20, verbose_name='登录账号')),
                ('otherLoginName', models.CharField(db_column='otherLoginName', max_length=20, verbose_name='被修改人的登录账号')),
                ('beforeChangeData', models.TextField(db_column='beforeChangeData', verbose_name='修改前的数据')),
                ('afterChangeData', models.TextField(db_column='afterChangeData', verbose_name='修改后的数据')),
                ('dataId', models.CharField(db_column='dataId', default='', max_length=500, verbose_name='选择修改的数据的Id  interfaceId caseId taskId')),
                ('changeDataId', models.CharField(db_column='changeDataId', default='', max_length=500, verbose_name='使用哪个Id的数据进行修改')),
                ('testStepId', models.CharField(db_column='testStepId', default='', max_length=500, verbose_name='testStepId')),
                ('type', models.IntegerField(db_column='type', verbose_name='0 删除 ，1 编辑')),
                ('version', models.CharField(db_column='version', default='', max_length=500, verbose_name='数据版本')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_user_change_log',
            },
        ),
        migrations.CreateModel(
            name='TbUserDeploymentTool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redisKey', models.CharField(db_column='redisKey', default='', max_length=1000, verbose_name='redisKey')),
                ('opsList', models.CharField(db_column='opsList', default='', max_length=1000, verbose_name='ops列表')),
                ('strongCheckSuccessList', models.CharField(db_column='strongCheckSuccessList', default='', max_length=1000, verbose_name='强校验成功的ops列表')),
                ('weakCheckSuccessList', models.CharField(db_column='weakCheckSuccessList', default='', max_length=1000, verbose_name='弱校验成功的ops列表')),
                ('strongCheckFailedList', models.CharField(db_column='strongCheckFailedList', default='', max_length=1000, verbose_name='强校验失败的ops列表')),
                ('weakCheckFailedList', models.CharField(db_column='weakCheckFailedList', default='', max_length=1000, verbose_name='弱校验失败的ops列表')),
                ('opsDeploySuccessList', models.CharField(db_column='opsDeploySuccessList', default='', max_length=1000, verbose_name='部署成功的ops列表')),
                ('serviceDeployList', models.CharField(db_column='serviceDeployList', default='', max_length=1000, verbose_name='service列表')),
                ('serviceDeploySuccessList', models.CharField(db_column='serviceDeploySuccessList', default='', max_length=1000, verbose_name='部署成功的service列表')),
                ('serviceDeployFailedList', models.CharField(db_column='serviceDeployFailedList', default='', max_length=1000, verbose_name='部署失败的service列表')),
                ('detail', models.TextField(db_column='detail', verbose_name='部署失败的service列表')),
                ('remark', models.CharField(db_column='remark', default='', max_length=1000, verbose_name='备注')),
                ('message', models.CharField(db_column='message', default='', max_length=1000, verbose_name='返回的消息')),
                ('report', models.CharField(db_column='report', default='', max_length=1000, verbose_name='报告路径')),
                ('status', models.IntegerField(db_column='status', default=1, verbose_name='状态 数据效验中 2部署中  3部署完成 4 部署发生异常')),
                ('autoFlag', models.IntegerField(db_column='autoFlag', default=0, verbose_name='0,效验带部署 手动  1，效验 自动 2.部署 自动')),
                ('execResult', models.CharField(db_column='execResult', default='', max_length=100, verbose_name='状态 PASS 成功 FAIL 失败')),
                ('state', models.IntegerField(db_column='state', default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_user_deployment_tool',
            },
        ),
        migrations.CreateModel(
            name='TbUserHttpconf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conflevel', models.IntegerField(verbose_name='配置优先级')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('addBy', models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbUserHttpconfAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名')),
                ('httpConfKey', models.ForeignKey(db_column='httpConfKey', max_length=20, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbConfigHttp', to_field='httpConfKey', verbose_name='执行环境的httpConfKey')),
                ('loginName', models.ForeignKey(blank=True, db_column='loginName', default='', max_length=30, on_delete=django.db.models.deletion.CASCADE, related_name='TbUserHttpconfLoginname', to='all_models.TbUser', to_field='loginName', verbose_name='执行人登录用户名')),
            ],
            options={
                'db_table': 'tb_user_httpconf',
            },
        ),
        migrations.CreateModel(
            name='TbUserLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginName', models.CharField(db_column='loginName', max_length=20, verbose_name='登录账号')),
                ('userName', models.CharField(db_column='userName', max_length=10, verbose_name='用户姓名')),
                ('operationUrl', models.CharField(db_column='operationUrl', default='', max_length=500, verbose_name='操作地址')),
                ('operationDesc', models.TextField(db_column='operationDesc', default='', verbose_name='操作详情')),
                ('operationResult', models.CharField(db_column='operationResult', default='', max_length=1000, verbose_name='操作结果')),
                ('fromHostIp', models.CharField(db_column='fromHostIp', default='', max_length=500, verbose_name='请求来源IP')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '用户操作日志',
                'verbose_name_plural': '51用户操作日志',
                'db_table': 'tb_user_log',
            },
        ),
        migrations.CreateModel(
            name='TbUserPermissionRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginName', models.CharField(db_column='loginName', default='', max_length=100, verbose_name='用户名称')),
                ('permissionKey', models.CharField(db_column='permissionKey', default='', max_length=100, verbose_name='权限名称')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_user_permission_relation',
            },
        ),
        migrations.CreateModel(
            name='TbUserTeamRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userName', models.CharField(db_column='userName', max_length=100, verbose_name='用户名称')),
                ('teamName', models.CharField(db_column='teamName', max_length=100, verbose_name='小组名称')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_user_team_relation',
            },
        ),
        migrations.CreateModel(
            name='TbUserUri',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conflevel', models.IntegerField(verbose_name='配置优先级')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('loginName', models.ForeignKey(blank=True, db_column='loginName', default='', max_length=30, on_delete=django.db.models.deletion.CASCADE, related_name='TbUserUriLoginname', to='all_models.TbUser', to_field='loginName', verbose_name='执行人登录用户名')),
                ('uriKey', models.ForeignKey(db_column='uriKey', max_length=20, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbConfigUri', verbose_name='执行环境的httpConfKey')),
            ],
            options={
                'db_table': 'tb_user_uri',
            },
        ),
        migrations.CreateModel(
            name='TbVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionName', models.CharField(db_column='versionName', max_length=25, unique=True, verbose_name='版本名称')),
                ('versionDesc', models.TextField(db_column='versionDesc', verbose_name='版本描述')),
                ('type', models.IntegerField(choices=[(0, '废弃版本(封版数据已清理)'), (1, '历史版本(已封版)'), (2, '当前版本'), (3, '未启用版本(预留未启动)')], default=3, verbose_name='类型')),
                ('closeTime', models.DateTimeField(db_column='closeTime', default=datetime.datetime(2018, 2, 23, 11, 24, 5, 219458), verbose_name='封板时间')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(blank=True, db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(blank=True, db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '版本',
                'verbose_name_plural': '50版本管理',
                'db_table': 'tb_version',
            },
        ),
        migrations.CreateModel(
            name='TbVersionGlobalText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('textDesc', models.CharField(db_column='textDesc', default='', max_length=5000, verbose_name='详情')),
                ('textKey', models.CharField(db_column='textKey', max_length=100, verbose_name='文本key,中英文数字下划线组合')),
                ('textValue', models.TextField(db_column='textValue', verbose_name='文本value')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(db_column='modTime', verbose_name='修改时间')),
                ('addBy', models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionGlobalTextAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名')),
                ('versionName', models.ForeignKey(db_column='versionName', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionGlobalTextVersionName', to='all_models.TbVersion', to_field='versionName', verbose_name='所属版本名称')),
            ],
            options={
                'db_table': 'tb_version_global_text',
            },
        ),
        migrations.CreateModel(
            name='TbVersionGlobalVars',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('varDesc', models.CharField(db_column='varDesc', max_length=5000, verbose_name='详情')),
                ('varKey', models.CharField(db_column='varKey', max_length=100, verbose_name='全局变量key,中英文数字下划线组合')),
                ('varValue', models.TextField(db_column='varValue', verbose_name='全局变量value')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(db_column='modTime', verbose_name='修改时间')),
                ('addBy', models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionGlobalVarsAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名')),
                ('versionName', models.ForeignKey(db_column='versionName', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionGlobalVarsVersionName', to='all_models.TbVersion', to_field='versionName', verbose_name='所属版本名称')),
            ],
            options={
                'db_table': 'tb_version_global_vars',
            },
        ),
        migrations.CreateModel(
            name='TbVersionHttpInterface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interfaceId', models.CharField(db_column='interfaceId', max_length=25, verbose_name='接口ID，例如HTTP_INTERFACE_1')),
                ('title', models.CharField(max_length=100, verbose_name='标题')),
                ('casedesc', models.CharField(max_length=1000, verbose_name='描述')),
                ('caselevel', models.IntegerField(default=5, verbose_name='用例优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('status', models.IntegerField(default=2, verbose_name='用例状态，1新建待审核 2审核通过 3审核未通过')),
                ('caseType', models.IntegerField(default=2, verbose_name='用例类型，0测试用例，不计入统计，不进入任务，1 接口计入统计 2接口步骤均计入统计 3步骤计入统计')),
                ('varsPre', models.TextField(db_column='varsPre', default='', verbose_name='前置变量')),
                ('uri', models.CharField(max_length=50, verbose_name='HTTP请求的URI，http://domainORip,或者是 uri表中的key，比如apiUri等')),
                ('method', models.CharField(choices=[('POST', 'POST'), ('GET', 'GET'), ('PUT', 'PUT'), ('PATCH', 'PATCH'), ('DELETE', 'DELETE'), ('HEAD', 'HEAD'), ('OPTIONS', 'OPTIONS')], default='POST', max_length=20, verbose_name='HTTP请求的method')),
                ('header', models.TextField(verbose_name='HTTP请求的头信息，json格式')),
                ('url', models.CharField(max_length=250, verbose_name='HTTP请求的URL，也就是接口路径')),
                ('params', models.TextField(verbose_name='HTTP请求的参数，urlencode格式或者json格式')),
                ('bodyType', models.CharField(choices=[('form-data', '表单提交'), ('x-www-form-urlencoded', 'urlencode模式'), ('raw', '源提交，例如application/json等'), ('binary', '单文件上传'), ('', 'GET、head时无请求体')], db_column='bodyType', default='', max_length=200, verbose_name='请求体类型')),
                ('bodyContent', models.TextField(db_column='bodyContent', default='', verbose_name='请求体内容，字符串或者json')),
                ('timeout', models.IntegerField(default=20, verbose_name='超时时间，单位秒')),
                ('varsPost', models.TextField(db_column='varsPost', verbose_name='后置变量')),
                ('performanceTime', models.FloatField(db_column='performanceTime', default=1, verbose_name='接口性能时间')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(db_column='modTime', verbose_name='修改时间')),
                ('addBy', models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionHttpInterfaceAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名')),
                ('businessLineId', models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID')),
                ('moduleId', models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID')),
                ('sourceId', models.ForeignKey(db_column='sourceId', default=1, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbSource', verbose_name='来源ID')),
                ('versionName', models.ForeignKey(db_column='versionName', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionHttpInterfaceVersionName', to='all_models.TbVersion', to_field='versionName', verbose_name='所属版本名称')),
            ],
            options={
                'db_table': 'tb_version_http_interface',
            },
        ),
        migrations.CreateModel(
            name='TbVersionHttpTestcase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caseId', models.CharField(db_column='caseId', max_length=25, verbose_name='caseId,可以理解为用例ID,格式HTTP_TESTCASE_1 - 99999999递增')),
                ('title', models.CharField(max_length=100, verbose_name='用例标题')),
                ('casedesc', models.CharField(max_length=1000, verbose_name='用例描述')),
                ('caselevel', models.IntegerField(default=5, verbose_name='用例优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('stepCount', models.IntegerField(db_column='stepCount', verbose_name='包含步骤数量')),
                ('status', models.IntegerField(default=2, verbose_name='用例状态，1新建待审核 2审核通过 3审核未通过')),
                ('caseType', models.IntegerField(default=2, verbose_name='用例类型，0测试用例，不计入统计，不进入任务，1 接口计入统计 2接口步骤均计入统计 3步骤计入统计')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(db_column='modTime', verbose_name='修改时间')),
                ('addBy', models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionHttpTestcaseAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名')),
                ('businessLineId', models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID')),
                ('moduleId', models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID')),
                ('sourceId', models.ForeignKey(db_column='sourceId', default=1, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbSource', verbose_name='来源ID')),
                ('versionName', models.ForeignKey(db_column='versionName', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionHttpTestcaseVersionName', to='all_models.TbVersion', to_field='versionName', verbose_name='所属版本名称')),
            ],
            options={
                'db_table': 'tb_version_http_testcase',
            },
        ),
        migrations.CreateModel(
            name='TbVersionHttpTestcaseStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caseId', models.CharField(db_column='caseId', default='', max_length=25, verbose_name='caseId,可以理解为用例ID,格式HTTP_TESTCASE_1 - 99999999递增')),
                ('stepNum', models.IntegerField(db_column='stepNum', verbose_name='步骤编号，每个caseID中的有效编号是从1递增')),
                ('title', models.CharField(max_length=100, verbose_name='步骤标题，默认 步骤1，步骤2 等等')),
                ('stepDesc', models.CharField(db_column='stepDesc', max_length=1000, verbose_name='步骤描述')),
                ('caseType', models.IntegerField(default=2, verbose_name='用例类型，0测试用例，不计入统计，不进入任务，1 接口计入统计 2接口步骤均计入统计 3步骤计入统计')),
                ('fromInterfaceId', models.CharField(db_column='fromInterfaceId', default='', max_length=30, verbose_name='步骤引用的接口Id')),
                ('isSync', models.IntegerField(choices=[(0, '不同步'), (1, '同步')], default=0, verbose_name='是否同步')),
                ('varsPre', models.TextField(db_column='varsPre', verbose_name='前置变量')),
                ('uri', models.CharField(max_length=50, verbose_name='HTTP请求的URI，http://domainORip,或者是 uri表中的key，比如apiUri等')),
                ('method', models.CharField(default='POST', max_length=20, verbose_name='HTTP请求的method')),
                ('header', models.TextField(verbose_name='HTTP请求的头信息，json格式')),
                ('url', models.CharField(max_length=250, verbose_name='HTTP请求的URL，也就是接口路径')),
                ('params', models.TextField(verbose_name='HTTP请求的参数，urlencode格式或者json格式')),
                ('bodyType', models.CharField(choices=[('form-data', '表单提交'), ('x-www-form-urlencoded', 'urlencode模式'), ('raw', '源提交，例如application/json等'), ('binary', '单文件上传'), ('', 'GET、head时无请求体')], db_column='bodyType', default='', max_length=200, verbose_name='请求体类型')),
                ('bodyContent', models.TextField(db_column='bodyContent', default='', verbose_name='请求体内容，字符串或者json')),
                ('timeout', models.IntegerField(default=20, verbose_name='超时时间，单位秒')),
                ('varsPost', models.TextField(db_column='varsPost', verbose_name='后置变量')),
                ('performanceTime', models.FloatField(db_column='performanceTime', default=1, verbose_name='接口性能时间')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(db_column='modTime', verbose_name='修改时间')),
                ('addBy', models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionHttpTestcaseStepAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名')),
                ('businessLineId', models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID')),
                ('moduleId', models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID')),
                ('sourceId', models.ForeignKey(db_column='sourceId', default=1, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbSource', verbose_name='来源ID')),
                ('versionName', models.ForeignKey(db_column='versionName', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionHttpTestcaseStepVersionName', to='all_models.TbVersion', to_field='versionName', verbose_name='所属版本名称')),
            ],
            options={
                'db_table': 'tb_version_http_testcase_step',
            },
        ),
        migrations.CreateModel(
            name='TbVersionStandardInterface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fileName', models.CharField(db_column='fileName', default='', max_length=3000, verbose_name='文件名')),
                ('interfaceUrl', models.CharField(db_column='interfaceUrl', default='/', max_length=300, verbose_name='解析出的标准接口URL')),
                ('interfaceCreateBy', models.CharField(db_column='interfaceCreateBy', default='暂时无法解析', max_length=100, verbose_name='创建者信息')),
                ('interfaceCreateTime', models.DateTimeField(db_column='interfaceCreateTime', default='', verbose_name='创建时间')),
                ('interfaceUpdateBy', models.CharField(db_column='interfaceUpdateBy', default='暂时无法解析', max_length=100, verbose_name='更新者信息')),
                ('interfaceUpdateTime', models.DateTimeField(db_column='interfaceUpdateTime', default='', verbose_name='修改时间')),
                ('authorEmail', models.CharField(db_column='authorEmail', default='暂时无法解析', max_length=200, verbose_name='作者邮箱（用于接收邮件）')),
                ('apiStatus', models.IntegerField(default=1, verbose_name='状态 0废弃 1有效 3不存在接口 4apiStatus状态值错误')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(db_column='modTime', verbose_name='修改时间')),
                ('addBy', models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionStandardInterfaceAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名')),
                ('businessLineId', models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID')),
                ('moduleId', models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID')),
                ('versionName', models.ForeignKey(db_column='versionName', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionStandardInterfaceVersionName', to='all_models.TbVersion', to_field='versionName', verbose_name='所属版本名称')),
            ],
            options={
                'db_table': 'tb_version_standard_interface',
            },
        ),
        migrations.CreateModel(
            name='TbVersionTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskId', models.CharField(db_column='taskId', max_length=25, verbose_name='任务ID')),
                ('title', models.CharField(max_length=100, verbose_name='任务标题')),
                ('taskdesc', models.CharField(max_length=1000, verbose_name='任务描述')),
                ('protocol', models.CharField(max_length=20, verbose_name='任务协议')),
                ('businessLineGroup', models.CharField(db_column='businessLineGroup', max_length=1000, verbose_name='任务包含的业务线名称，例如 SFA,服务云')),
                ('modulesGroup', models.CharField(db_column='modulesGroup', max_length=1000, verbose_name='任务包含的模块名称，例如 合同,订单')),
                ('sourceGroup', models.CharField(db_column='sourceGroup', default="['电脑Web']", max_length=1000, verbose_name='任务包含的来源名称，例如 IOS 安卓 Web端 所有')),
                ('emailList', models.CharField(db_column='emailList', default='', max_length=2000, verbose_name='发送邮件列表，除却执行人execBy以外的其他收件人')),
                ('taskLevel', models.IntegerField(db_column='taskLevel', default=5, verbose_name='优先级，数字越小，优先级越高，从0-9。 0高 5中 9低')),
                ('highPriorityVARS', models.TextField(db_column='highPriorityVARS', default='', verbose_name='高优先级变量，执行时覆盖同名的变量和全局变量')),
                ('status', models.IntegerField(default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('interfaceCount', models.IntegerField(db_column='interfaceCount', verbose_name='任务中的接口数量统计')),
                ('taskInterfaces', models.TextField(db_column='taskInterfaces', verbose_name='任务中的接口列表，多个接口用,间隔，例如 HTTP_INTERFACE_1,HTTP_INTERFACE_2')),
                ('caseCount', models.IntegerField(db_column='caseCount', verbose_name='任务中的用例数量统计')),
                ('taskTestcases', models.TextField(db_column='taskTestcases', verbose_name='任务中的用例列表，多个接口用,间隔，例如 HTTP_TESTCASE_1,HTTP_TESTCASE_2')),
                ('interfaceNum', models.IntegerField(db_column='interfaceNum', verbose_name='任务总的接口数量，包含接口的和用例中的步骤数量')),
                ('isCI', models.IntegerField(db_column='isCI', default=1, verbose_name='是否加入到持续集成  0 不加人  1加入')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(db_column='modTime', verbose_name='修改时间')),
                ('addBy', models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionTaskAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名')),
                ('versionName', models.ForeignKey(db_column='versionName', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionTaskVersionName', to='all_models.TbVersion', to_field='versionName', verbose_name='所属版本名称')),
            ],
            options={
                'db_table': 'tb_version_task',
            },
        ),
        migrations.CreateModel(
            name='TbVersionTaskSuite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskSuiteId', models.CharField(db_column='taskSuiteId', max_length=25, unique=True, verbose_name='任务ID')),
                ('title', models.CharField(db_column='title', max_length=100, verbose_name='任务集标题')),
                ('taskSuiteDesc', models.CharField(db_column='taskSuiteDesc', max_length=1000, verbose_name='任务集描述')),
                ('protocol', models.CharField(db_column='protocol', max_length=20, verbose_name='任务集协议')),
                ('emailList', models.CharField(db_column='emailList', default='', max_length=2000, verbose_name='发送邮件列表，除却执行人execBy以外的其他收件人')),
                ('status', models.IntegerField(db_column='status', default=2, verbose_name='状态，1新建待审核 2审核通过 3审核未通过')),
                ('taskCount', models.IntegerField(db_column='taskCount', verbose_name='任务集中的任务列表')),
                ('taskList', models.TextField(db_column='taskList', verbose_name='任务集中的任务列表')),
                ('isCI', models.IntegerField(db_column='isCI', default=0, verbose_name='是否加入到持续集成  0 不加人  1加入')),
                ('state', models.IntegerField(db_column='state', default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('versionName', models.ForeignKey(db_column='versionName', on_delete=django.db.models.deletion.CASCADE, related_name='TbVersionTaskSuiteVersionName', to='all_models.TbVersion', to_field='versionName', verbose_name='所属版本名称')),
            ],
            options={
                'verbose_name': '任务集',
                'db_table': 'tb_version_task_suite',
            },
        ),
        migrations.CreateModel(
            name='TbWebPorRMIServiceTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classNum', models.IntegerField(db_column='classNum', verbose_name='类总数')),
                ('classCoverage', models.IntegerField(db_column='classCoverage', verbose_name='类覆盖数量')),
                ('methodNum', models.IntegerField(db_column='methodNum', verbose_name='方法总数')),
                ('methodCoverage', models.IntegerField(db_column='methodCoverage', verbose_name='方法覆盖数')),
                ('coveredRate', models.FloatField(db_column='coveredRate', verbose_name='方法覆盖率')),
                ('testNum', models.IntegerField(db_column='testNum', verbose_name='测试用例总数')),
                ('service', models.CharField(db_column='service', max_length=200, verbose_name='测试的服务')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_RMI_service_test',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalActionInterfaceGeneralSituation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statisticalDetail', models.TextField(db_column='statisticalDetail', verbose_name='统计详情')),
                ('version', models.CharField(db_column='version', default='v1801', max_length=200, verbose_name='版本')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_action_interface_general_situation',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalActionInterfaceTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('businessLine', models.CharField(db_column='businessLine', max_length=200, verbose_name='业务线')),
                ('envTestDetail', models.TextField(db_column='envTestDetail', verbose_name='多环境测试结果')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
            ],
            options={
                'db_table': 'tb_webPortal_action_interface_test',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalAllPassRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testResultMsg', models.TextField(db_column='testResultMsg', verbose_name='任务执行的统计信息,详细统计，json字符串形式保存。')),
                ('execTakeTime', models.IntegerField(db_column='execTakeTime', default=0, verbose_name='执行耗时')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_all_passRate',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalBusinessLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bussinessLine', models.CharField(db_column='bussinessLine', max_length=25, unique=True, verbose_name='businessLine名字')),
                ('bussinessLineDesc', models.CharField(db_column='bussinessLineDesc', default='', max_length=2000, verbose_name='businessLine描述')),
                ('isShow', models.IntegerField(choices=[(1, '显示'), (0, '隐藏')], db_column='isShow', verbose_name='是否显示')),
                ('level', models.IntegerField(db_column='level', verbose_name='webpotal页面显示排序，从小到大排序')),
                ('state', models.IntegerField(default=1, verbose_name='状态 0删除 1有效')),
                ('addBy', models.CharField(db_column='addBy', max_length=25, null=True, verbose_name='创建者登录名')),
                ('modBy', models.CharField(db_column='modBy', max_length=25, null=True, verbose_name='修改者登录名')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_business_line',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalBusinessLineActionPassRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testResultMsg', models.TextField(db_column='testResultMsg', verbose_name='任务执行的统计信息,详细统计，json字符串形式保存。')),
                ('execTakeTime', models.IntegerField(db_column='execTakeTime', default=0, verbose_name='执行耗时')),
                ('businessLine', models.CharField(db_column='businessLine', max_length=25, verbose_name='businessLine名字')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_business_line_action_passrate',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalPassingRateEnv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('httpConfKey', models.CharField(db_column='httpConfKey', max_length=50, unique=True, verbose_name='http服务的key，用例调试、任务执行时，会根据此key来获取对应的http的config信息')),
                ('openApiKey', models.CharField(db_column='openApiKey', max_length=50, verbose_name='openApi服务的key，用例调试、任务执行时，会根据此key来获取对应的http的config信息')),
                ('rmiKey', models.CharField(db_column='rmiKey', max_length=50, verbose_name='rmi服务的key，用例调试、任务执行时，会根据此key来获取对应的http的config信息')),
                ('alias', models.CharField(db_column='alias', max_length=200, unique=True, verbose_name='别名')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default=datetime.datetime(2018, 2, 23, 11, 24, 5, 219458), verbose_name='统计时间')),
            ],
            options={
                'verbose_name': '通过率环境配置',
                'verbose_name_plural': '21通过率环境配置管理',
                'db_table': 'tb_webPortal_passingRate_Env',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalPlatformInterfaceCovered',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('businessLine', models.CharField(db_column='businessLine', max_length=200, verbose_name='业务线')),
                ('standardInterfaceNum', models.IntegerField(db_column='standardInterfaceNum', verbose_name='标准接口数量')),
                ('coveredInterfaceNum', models.IntegerField(db_column='coveredInterfaceNum', verbose_name='已覆盖接口数量')),
                ('coverage', models.FloatField(db_column='coverage', verbose_name='覆盖率')),
                ('executeInterfaceNum', models.IntegerField(db_column='executeInterfaceNum', verbose_name='已执行接口数')),
                ('executeInterfaceCoverage', models.FloatField(db_column='executeInterfaceCoverage', verbose_name='用例执行接口覆盖率')),
                ('interfaceNum', models.IntegerField(db_column='interfaceNum', verbose_name='用例总数')),
                ('executeInterfaceSum', models.IntegerField(db_column='executeInterfaceSum', verbose_name='执行用例总数')),
                ('testCaseSum', models.IntegerField(db_column='testCaseSum', verbose_name='场景总数')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
                ('version', models.CharField(db_column='version', default='v1801', max_length=200, verbose_name='版本')),
            ],
            options={
                'db_table': 'tb_webPortal_platform_interface_covered',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalRmiStandardService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceName', models.CharField(db_column='serviceName', max_length=200)),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_RMI_standard_service',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalServiceInterfaceCovered',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceName', models.CharField(db_column='serviceName', max_length=100, unique=True, verbose_name='service名称')),
                ('standardInterfaceNum', models.IntegerField(db_column='standardInterfaceNum', verbose_name='标准接口数量')),
                ('coveredInterfaceNum', models.IntegerField(db_column='coveredInterfaceNum', verbose_name='已覆盖接口数量')),
                ('coverage', models.FloatField(db_column='coverage', verbose_name='覆盖率')),
                ('serviceTestDetail', models.TextField(db_column='serviceTestDetail', default='', verbose_name='service覆盖详情')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
                ('state', models.IntegerField(db_column='state', default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_service_interface_covered',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalStandardEnv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('httpConfKey', models.CharField(db_column='httpConfKey', max_length=50, unique=True, verbose_name='http服务的key，用例调试、任务执行时，会根据此key来获取对应的http的config信息')),
                ('openApiKey', models.CharField(db_column='openApiKey', max_length=50, verbose_name='openApi服务的key，用例调试、任务执行时，会根据此key来获取对应的http的config信息')),
                ('rmiKey', models.CharField(db_column='rmiKey', max_length=50, verbose_name='rmi服务的key，用例调试、任务执行时，会根据此key来获取对应的http的config信息')),
                ('version', models.CharField(db_column='version', max_length=200, verbose_name='版本')),
                ('actionIsShow', models.IntegerField(choices=[(1, '显示'), (0, '不显示')], db_column='actionIsShow', verbose_name='action环境列是否显示,0不显示，1显示')),
                ('rmiIsShow', models.IntegerField(choices=[(1, '显示'), (0, '不显示')], db_column='rmiIsShow', verbose_name='rmi环境列是否显示,0不显示，1显示')),
                ('openapiIsShow', models.IntegerField(choices=[(1, '显示'), (0, '不显示')], db_column='openapiIsShow', verbose_name='openapi环境列是否显示,0不显示，1显示')),
                ('uiIsShow', models.IntegerField(choices=[(1, '显示'), (0, '不显示')], db_column='uiIsShow', verbose_name='ui环境列是否显示,0不显示，1显示')),
                ('alias', models.CharField(db_column='alias', max_length=200, unique=True, verbose_name='别名')),
                ('lineSort', models.IntegerField(db_column='lineSort', verbose_name='列的排-序，从小到大依次显示')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '通过率环境版本配置',
                'verbose_name_plural': '23通过率环境版本配置管理',
                'db_table': 'tb_webPortal_standard_Env',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalStandardTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(db_column='version', max_length=200, verbose_name='版本')),
                ('businessLine', models.CharField(db_column='businessLine', max_length=200, verbose_name='业务线')),
                ('team', models.CharField(db_column='team', max_length=200, verbose_name='小组')),
                ('head', models.CharField(db_column='head', max_length=200, verbose_name='负责人')),
                ('taskId', models.CharField(db_column='task', max_length=200, verbose_name='任务')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '标准任务版本管理',
                'verbose_name_plural': '22标准任务版本管理',
                'db_table': 'tb_webPortal_standard_task',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('businessLine', models.CharField(db_column='businessLine', max_length=200, verbose_name='业务线')),
                ('team', models.CharField(db_column='team', max_length=200, verbose_name='小组')),
                ('head', models.CharField(db_column='head', max_length=200, verbose_name='负责人')),
                ('taskId', models.CharField(db_column='task', max_length=200, verbose_name='任务')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '标准任务',
                'verbose_name_plural': '20标准任务管理',
                'db_table': 'tb_webPortal_task',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalUiCovered',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coverDetail', models.TextField(db_column='coverDetail', verbose_name='多环境测试结果')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
            ],
            options={
                'db_table': 'tb_webPortal_ui_covered',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalUIGeneralSituation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('generalSituationDetail', models.CharField(db_column='generalSituationDetail', max_length=2000, verbose_name='统计详情')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
            ],
            options={
                'db_table': 'tb_webPortal_ui_general_situation',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalUITest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testDetail', models.TextField(db_column='testDetail', verbose_name='多环境测试结果')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
            ],
            options={
                'db_table': 'tb_webPortal_ui_test',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalUITestGeneralSituation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('testCaseNum', models.IntegerField(db_column='testCaseNum', verbose_name='功能测试用例数量')),
                ('autoTestCoveredNum', models.IntegerField(db_column='autoTestCoveredNum', verbose_name='自动化覆盖数量')),
                ('autoTestRate', models.FloatField(db_column='autoTestRate', verbose_name='自动化率')),
                ('coveredDetail', models.TextField(db_column='coveredDetail', verbose_name='ui覆盖度')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_ui_test_general_situation',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalUnitTestGeneralSituation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codeNum', models.IntegerField(db_column='codeNum', verbose_name='代码总行数')),
                ('coverage', models.IntegerField(db_column='coverage', verbose_name='代码覆盖行数')),
                ('coverageRate', models.FloatField(db_column='coverageRate', verbose_name='覆盖率')),
                ('unitTestDetail', models.TextField(db_column='unitTestDetail', verbose_name='单元覆盖详情')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_unit_test_general_situation',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortalUnitTestService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceName', models.CharField(db_column='serviceName', max_length=200, verbose_name='service名称')),
                ('serviceDesc', models.CharField(db_column='serviceDesc', max_length=200, verbose_name='service描述')),
                ('isShow', models.IntegerField(choices=[(1, '显示'), (0, '隐藏')], db_column='isShow', verbose_name='是否显示')),
                ('level', models.IntegerField(db_column='level', verbose_name='service显示排序，从小到大排序')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '单元测试service',
                'verbose_name_plural': '26单元测试service',
                'db_table': 'tb_webPortal_unit_test_service',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortOpenApiBlTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interfaceSum', models.IntegerField(db_column='interfaceSum', verbose_name='接口总数')),
                ('covered', models.IntegerField(db_column='covered', verbose_name='覆盖的接口的总数')),
                ('coveredRate', models.FloatField(db_column='coveredRate', verbose_name='接口覆盖率')),
                ('total', models.IntegerField(db_column='total', verbose_name='测试用例总数')),
                ('executedRate', models.IntegerField(db_column='executedRate', verbose_name='测试用例执行率，这里目前都是100%执行')),
                ('profile', models.CharField(db_column='profile', max_length=200, verbose_name='测试环境')),
                ('businessLine', models.CharField(db_column='businessLine', max_length=200, verbose_name='openapi业务线')),
                ('testBeginTime', models.DateTimeField(db_column='testBeginTime', verbose_name='测试开始时间')),
                ('testEndTime', models.DateTimeField(db_column='testEnfTime', verbose_name='测试结束时间')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_openApi_bl_test',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortOpenApiGeneralSituation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interfaceSum', models.IntegerField(db_column='interfaceSum', verbose_name='接口总数')),
                ('covered', models.IntegerField(db_column='covered', verbose_name='覆盖的接口的总数')),
                ('coveredRate', models.FloatField(db_column='coveredRate', verbose_name='接口覆盖率')),
                ('total', models.IntegerField(db_column='total', verbose_name='测试用例总数')),
                ('executedRate', models.IntegerField(db_column='executedRate', verbose_name='测试用例执行率，这里目前都是100%执行')),
                ('profile', models.CharField(db_column='profile', max_length=200, verbose_name='测试环境')),
                ('averageInterfaceNum', models.CharField(db_column='averageInterfaceNum', max_length=200, verbose_name='平均接口用例数')),
                ('testBeginTime', models.DateTimeField(db_column='testBeginTime', verbose_name='测试开始时间')),
                ('testEndTime', models.DateTimeField(db_column='testEnfTime', verbose_name='测试结束时间')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_openApi_general_situation',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortOpenApiInterfaceTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('businessLine', models.CharField(db_column='businessLine', max_length=200, verbose_name='业务线')),
                ('interfaceDetail', models.TextField(db_column='interfaceDetail', verbose_name='多环境测试详情')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_openApi_interface_test',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortRMIGeneralSituation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coverage', models.IntegerField(db_column='coverage', verbose_name='覆盖的数量')),
                ('methodTotal', models.IntegerField(db_column='methodTotal', verbose_name='方法总数')),
                ('totalTest', models.IntegerField(db_column='totalTest', verbose_name='测试用例总数')),
                ('failedNum', models.IntegerField(db_column='failedNum', verbose_name='测试失败总数')),
                ('passedNum', models.IntegerField(db_column='passedNum', verbose_name='测试通过总数')),
                ('skippedNum', models.IntegerField(db_column='skippedNum', verbose_name='测试跳过总数')),
                ('summaryAt', models.DateTimeField(db_column='summaryAt', default='2018-02-01 00:00:00', verbose_name='测试时间')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_RMI_general_situation',
            },
        ),
        migrations.CreateModel(
            name='TbWebPortRMIInterfaceTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interfaceDetail', models.TextField(db_column='interfaceDetail', verbose_name='多环境测试详情')),
                ('statisticalTime', models.DateTimeField(db_column='statisticalTime', default='2018-02-01 00:00:00', verbose_name='统计时间')),
                ('state', models.IntegerField(choices=[(1, '有效'), (0, '无效')], default=1, verbose_name='状态 0删除 1有效')),
                ('addTime', models.DateTimeField(auto_now_add=True, db_column='addTime', verbose_name='创建时间')),
                ('modTime', models.DateTimeField(auto_now=True, db_column='modTime', verbose_name='修改时间')),
            ],
            options={
                'db_table': 'tb_webPortal_RMI_interface_test',
            },
        ),
        migrations.AlterUniqueTogether(
            name='tbuiversiontask',
            unique_together=set([('versionName', 'taskId')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuiversionpageobjectelements',
            unique_together=set([('versionName', 'poKey', 'elementKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuiversionpageobject',
            unique_together=set([('versionName', 'poKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuiversionglobalvars',
            unique_together=set([('versionName', 'varKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuiversionglobaltext',
            unique_together=set([('versionName', 'textKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuiversionfunctionstestcase',
            unique_together=set([('versionName', 'commonFuncKey', 'functionName')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuiversionfunctions',
            unique_together=set([('versionName', 'commonFuncKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuitestexcel',
            unique_together=set([('fileName', 'addBy')]),
        ),
        migrations.AddField(
            model_name='tbuitasksimple',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbUiTaskSimpleAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AlterUniqueTogether(
            name='tbuipageobjectelements',
            unique_together=set([('poKey', 'elementKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuifunctionstestcase',
            unique_together=set([('commonFuncKey', 'functionName')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuifunctions',
            unique_together=set([('commonFuncKey',)]),
        ),
        migrations.AddField(
            model_name='tbtaskexecute',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbTaskExecuteAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbtaskexecute',
            name='execBy',
            field=models.ForeignKey(blank=True, db_column='execBy', default='', max_length=30, on_delete=django.db.models.deletion.CASCADE, related_name='TbTaskExecuteExecBy', to='all_models.TbUser', to_field='loginName', verbose_name='执行人登录用户名'),
        ),
        migrations.AddField(
            model_name='tbtaskexecute',
            name='httpConfKey',
            field=models.ForeignKey(db_column='httpConfKey', max_length=20, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbConfigHttp', to_field='httpConfKey', verbose_name='执行环境的httpConfKey'),
        ),
        migrations.AddField(
            model_name='tbtask',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbTaskAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbtag',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbTagAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbstandardinterface',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbStandardInterfaceAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbstandardinterface',
            name='businessLineId',
            field=models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID'),
        ),
        migrations.AddField(
            model_name='tbstandardinterface',
            name='moduleId',
            field=models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID'),
        ),
        migrations.AddField(
            model_name='tbjiramoduleplatformrelation',
            name='platformModuleId',
            field=models.ForeignKey(db_column='platformModuleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='平台上的模块Id'),
        ),
        migrations.AddField(
            model_name='tbinterfaceexecutehistory',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbInterfaceExecuteHistoryAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbinterfaceexecutehistory',
            name='execBy',
            field=models.ForeignKey(blank=True, db_column='execBy', default='', max_length=30, on_delete=django.db.models.deletion.CASCADE, related_name='TbInterfaceExecuteHistoryExecBy', to='all_models.TbUser', to_field='loginName', verbose_name='执行人登录用户名'),
        ),
        migrations.AddField(
            model_name='tbinterfaceexecutehistory',
            name='httpConfKey',
            field=models.ForeignKey(db_column='httpConfKey', max_length=20, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbConfigHttp', to_field='httpConfKey', verbose_name='执行环境的httpConfKey'),
        ),
        migrations.AddField(
            model_name='tbinterfaceexecutehistory',
            name='taskExecuteId',
            field=models.ForeignKey(db_column='taskExecuteId', on_delete=django.db.models.deletion.CASCADE, related_name='TbInterfaceExecuteHistoryTaskExecuteId', to='all_models.TbTaskExecute', verbose_name='任务执行表的主键ID，关联哪次执行的任务'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasetag',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbHttpTestcaseTagAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasetag',
            name='caseId',
            field=models.ForeignKey(db_column='caseId', max_length=25, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbHttpTestcase', to_field='caseId', verbose_name='TbHttpTestcase表中的caseID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasetag',
            name='tagId',
            field=models.ForeignKey(db_column='tagId', max_length=25, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbTag', verbose_name='tag表中的主键id'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestepdebug',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbHttpTestcaseStepDebugAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestepdebug',
            name='businessLineId',
            field=models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestepdebug',
            name='httpConfKey',
            field=models.ForeignKey(db_column='httpConfKey', max_length=20, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbConfigHttp', to_field='httpConfKey', verbose_name='执行环境的httpConfKey'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestepdebug',
            name='moduleId',
            field=models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestepdebug',
            name='sourceId',
            field=models.ForeignKey(db_column='sourceId', default=1, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbSource', verbose_name='来源ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestep',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbHttpTestcaseStepAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestep',
            name='businessLineId',
            field=models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestep',
            name='caseId',
            field=models.ForeignKey(db_column='caseId', max_length=25, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbHttpTestcase', to_field='caseId', verbose_name='TbHttpTestcase表中的caseID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestep',
            name='moduleId',
            field=models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasestep',
            name='sourceId',
            field=models.ForeignKey(db_column='sourceId', default=1, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbSource', verbose_name='来源ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasedebug',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbHttpTestcaseDebugAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasedebug',
            name='businessLineId',
            field=models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasedebug',
            name='httpConfKey',
            field=models.ForeignKey(db_column='httpConfKey', max_length=20, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbConfigHttp', to_field='httpConfKey', verbose_name='执行环境的httpConfKey'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasedebug',
            name='moduleId',
            field=models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcasedebug',
            name='sourceId',
            field=models.ForeignKey(db_column='sourceId', default=1, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbSource', verbose_name='来源ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcase',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbHttpTestcaseAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbhttptestcase',
            name='businessLineId',
            field=models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcase',
            name='moduleId',
            field=models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID'),
        ),
        migrations.AddField(
            model_name='tbhttptestcase',
            name='sourceId',
            field=models.ForeignKey(db_column='sourceId', default=1, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbSource', verbose_name='来源ID'),
        ),
        migrations.AddField(
            model_name='tbhttpinterfacetag',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbHttpInterfaceTagAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbhttpinterfacetag',
            name='interfaceId',
            field=models.ForeignKey(db_column='interfaceId', max_length=25, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbHttpInterface', to_field='interfaceId', verbose_name='接口ID'),
        ),
        migrations.AddField(
            model_name='tbhttpinterfacetag',
            name='tagId',
            field=models.ForeignKey(db_column='tagId', max_length=25, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbTag', verbose_name='tag表中的主键id'),
        ),
        migrations.AddField(
            model_name='tbhttpinterfacedebug',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbHttpInterfaceDebugAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbhttpinterfacedebug',
            name='businessLineId',
            field=models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID'),
        ),
        migrations.AddField(
            model_name='tbhttpinterfacedebug',
            name='httpConfKey',
            field=models.ForeignKey(db_column='httpConfKey', max_length=20, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbConfigHttp', to_field='httpConfKey', verbose_name='执行环境的httpConfKey'),
        ),
        migrations.AddField(
            model_name='tbhttpinterfacedebug',
            name='moduleId',
            field=models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID'),
        ),
        migrations.AddField(
            model_name='tbhttpinterfacedebug',
            name='sourceId',
            field=models.ForeignKey(db_column='sourceId', default=1, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbSource', verbose_name='来源ID'),
        ),
        migrations.AddField(
            model_name='tbhttpinterface',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbHttpInterfaceAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbhttpinterface',
            name='businessLineId',
            field=models.ForeignKey(db_column='businessLineId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbBusinessLine', verbose_name='业务线ID'),
        ),
        migrations.AddField(
            model_name='tbhttpinterface',
            name='moduleId',
            field=models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID'),
        ),
        migrations.AddField(
            model_name='tbhttpinterface',
            name='sourceId',
            field=models.ForeignKey(db_column='sourceId', default=1, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbSource', verbose_name='来源ID'),
        ),
        migrations.AddField(
            model_name='tbglobalvars',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbGlobalVarsAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AddField(
            model_name='tbglobaltext',
            name='addBy',
            field=models.ForeignKey(db_column='addBy', on_delete=django.db.models.deletion.CASCADE, related_name='TbGlobalTextAddBy', to='all_models.TbUser', to_field='loginName', verbose_name='创建者登录名'),
        ),
        migrations.AlterUniqueTogether(
            name='tbenvuriconf',
            unique_together=set([('httpConfKey', 'uriKey')]),
        ),
        migrations.AddField(
            model_name='tbconfighttp',
            name='serviceConfKey',
            field=models.ForeignKey(db_column='serviceConfKey', max_length=25, on_delete=django.db.models.deletion.CASCADE, to='all_models.TbConfigService', to_field='serviceConfKey', verbose_name='TbConfigService的serviceConfKey，根据此信息把http_conf调用的底层service配置获取加载'),
        ),
        migrations.AddField(
            model_name='tbbusinesslinemodulerelation',
            name='moduleId',
            field=models.ForeignKey(db_column='moduleId', on_delete=django.db.models.deletion.CASCADE, to='all_models.TbModules', verbose_name='模块ID'),
        ),
        migrations.AlterUniqueTogether(
            name='tbversiontask',
            unique_together=set([('versionName', 'taskId')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbversionhttptestcasestep',
            unique_together=set([('versionName', 'caseId', 'stepNum')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbversionhttptestcase',
            unique_together=set([('versionName', 'caseId')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbversionhttpinterface',
            unique_together=set([('versionName', 'interfaceId')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbversionglobalvars',
            unique_together=set([('versionName', 'varKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbversionglobaltext',
            unique_together=set([('versionName', 'textKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuseruri',
            unique_together=set([('loginName', 'uriKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbuserhttpconf',
            unique_together=set([('loginName', 'httpConfKey')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbjiramoduleplatformrelation',
            unique_together=set([('jiraModuleId', 'platformModuleId')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbjirabusinesslineplatformrelation',
            unique_together=set([('jiraBusinessLineId', 'platformBusinessLineId')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbhttptestcasetag',
            unique_together=set([('caseId', 'tagId')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbhttptestcasestep',
            unique_together=set([('caseId', 'stepNum')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbhttpinterfacetag',
            unique_together=set([('interfaceId', 'tagId')]),
        ),
        migrations.AlterUniqueTogether(
            name='tbbusinesslinemodulerelation',
            unique_together=set([('businessLineId', 'moduleId')]),
        ),
    ]
