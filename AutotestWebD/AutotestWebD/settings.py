"""
Django settings for AutotestWebD project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os,platform,time,sys,io
from apps.common.model.Config import Config
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!ydabl@et%#r2vt-pho)og$fw#t4f1ybue9j%=qs@7fo!n^x4='

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print("BASE_DIR: %s" % BASE_DIR)

#项目的根目录
rootDir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))).replace("\\","/")
print("rootDir: %s" % rootDir)

confDict = Config().getConfDictByFile("%s/config.ini" % rootDir) #初始化配置文件
print("config.ini CONFDICT: %s" % confDict)

#############################
# ldap 配置信息 start
#############################
if 'Linux' in platform.system():
    loginType = confDict['COMMON']['loginType']
    if loginType == "LDAP":
        LDAP_ENABLED = True
    else:
        LDAP_ENABLED = False
else:
    LDAP_ENABLED = False

if LDAP_ENABLED:
    import ldap
    from django_auth_ldap.config import LDAPSearchUnion, LDAPSearch, GroupOfNamesType, PosixGroupType

    AUTHENTICATION_BACKENDS = (
        'django_auth_ldap.backend.LDAPBackend',  # 配置为先使用LDAP认证，如通过认证则不再使用后面的认证方式
        'django.contrib.auth.backends.ModelBackend',  # 同时打开本地认证，因为下游系统的权限和组关系需要用到
    )


    AUTH_LDAP_SERVER_URI =confDict['LDAP']['AUTH_LDAP_SERVER_URI']
    AUTH_LDAP_BIND_DN = confDict['LDAP']['AUTH_LDAP_BIND_DN']
    AUTH_LDAP_BIND_PASSWORD = confDict['LDAP']['AUTH_LDAP_BIND_PASSWORD']
    AUTH_LDAP_USER_SEARCH = eval(confDict['LDAP']['AUTH_LDAP_USER_SEARCH'])

    AUTH_LDAP_USER_ATTR_MAP = eval(confDict['LDAP']['AUTH_LDAP_USER_ATTR_MAP'])
    AUTH_LDAP_GROUP_SEARCH = eval(confDict['LDAP']['AUTH_LDAP_GROUP_SEARCH'])
    AUTH_LDAP_GROUP_TYPE = eval(confDict['LDAP']['AUTH_LDAP_GROUP_TYPE'])

    AUTH_LDAP_ALWAYS_UPDATE_USER = True
    AUTH_LDAP_MIRROR_GROUPS = True  #导入用户的组信息，在用户登录的时候把用户的域组关系同步过来。每次用户登录时，都会把用户
    AUTH_LDAP_FIND_GROUP_PERMS = True
    AUTH_LDAP_CACHE_GROUPS = True  # 如打开FIND_GROUP_PERMS后，才生效，对组关系进行缓存，不用每次请求都调用ldap
    AUTH_LDAP_GROUP_CACHE_TIMEOUT = 600
#############################
# ldap 配置信息 end
#############################

#apidoc需要解析的src所有源文件的根目录
srcRootDir = "%s/src" % (os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))).replace("\\","/"))
print("srcRootDir: %s" % srcRootDir)
if "srcFolders" in confDict['COMMON'].keys():
    #项目目录src下面的各个项目包
    srcFolders = eval(confDict['COMMON']['srcFolders'])
    #对应srcFolders的解析出来的url的前缀，也就是部署目录。
    srcFoldersPrefix = eval(confDict['COMMON']['srcFoldersPrefix'])
    #要解析的文件名规则，后缀或者正则。
    srcFoldersLastFileNameRole = eval(confDict['COMMON']['srcFoldersLastFileNameRole'])
    #解析规则，描述符规则。
    srcFoldersApiRoll =eval(confDict['COMMON']['srcFoldersApiRoll'])#要count的描述符
    srcFoldersApiRollNumControlFactor =eval(confDict['COMMON']['srcFoldersApiRollNumControlFactor']) #对应的count取值后的变量调整
    print("srcFolders: %s" % srcFolders)
else:
    #项目目录src下面的各个项目包
    srcFolders = []
    #对应srcFolders的解析出来的url的前缀，也就是部署目录。
    srcFoldersPrefix = []
    #要解析的文件名规则，后缀或者正则。
    srcFoldersLastFileNameRole = []
    #解析规则，描述符规则。
    srcFoldersApiRoll =[]
    srcFoldersApiRollNumControlFactor =[]

#是否上传到AWS
if "http_report_to_AWS" in confDict['COMMON'].keys():
    http_report_to_AWS = confDict["COMMON"]["http_report_to_AWS"]
else:
    http_report_to_AWS = "0"

if "deployment_tool" in confDict['COMMON'].keys():
    deployment_tool_insettings = int(confDict['COMMON']['deployment_tool'])
else:
    deployment_tool_insettings = 0

releaseDir = confDict['DIR']['releaseRoot']
print("releaseDir: %s" % releaseDir)
ALLOWED_HOSTS = eval(confDict['COMMON']['allowed_host'])
print("ALLOWED_HOSTS: %s" % ALLOWED_HOSTS)
groupLevel1 = confDict['COMMON']['groupLevel1']
groupLevel2 = confDict['COMMON']['groupLevel2']
print("GroupLevel1:%s  GroupLevel2:%s" % (groupLevel1,groupLevel2))
showMenuConfig = eval(confDict['COMMON']['showMenuConfig'])
print("showMenuConfig:%s" % (showMenuConfig))

dbKey = "DB-%s" % confDict['DIR']['useTag']
tcpKey = "TCP-%s" % confDict['DIR']['useTag']
webKey = "WEB-%s" % confDict['DIR']['useTag']
emailKey = "EMAIL-%s" % confDict['DIR']['useTag']
redisKey = "REDIS-%s" % confDict['DIR']['useTag']
dirfileKey = "DIRFILE-%s" % confDict['DIR']['useTag']

isRelease = False
if releaseDir == rootDir:
    isRelease = True
    dbKey = "DB"
    tcpKey = "TCP"
    webKey = "WEB"
    emailKey = "EMAIL"
    redisKey = "REDIS"
    dirfileKey = "DIRFILE"

print("TEST_ENV [%s]" % confDict['DIR']['useTag'])

SITE_NAME = confDict['SITE']['site_name']
SITE_HEADER = confDict['SITE']['header']
SITE_TITLE = confDict['SITE']['title']

TCP_HOST = confDict[tcpKey]['host']
TCP_PORT = int(confDict[tcpKey]['port'])
TCP_UIPORT = int(confDict[tcpKey]['uiport'])

print("TCP_HOST[%s] TCP_PORT[%s] TCP_UIPORT[%s]" % (TCP_HOST,TCP_PORT,TCP_UIPORT))

dbHost = confDict[dbKey]['host']
dbPort = int(confDict[dbKey]['port'])
dbUsername = confDict[dbKey]['username']
dbPassword = confDict[dbKey]['password']
dbName = confDict[dbKey]['dbname']
print("dbHost[%s] dbPort[%s] dbUsername[%s] dbPassword[%s] dbName[%s]" % (dbHost,dbPort,dbUsername,dbPassword,dbName))


dirfilePath = confDict[dirfileKey]['filepath']
dirfileLog = confDict[dirfileKey]['log']
dirfileUploads = confDict[dirfileKey]['uploads']
dirfileReports = confDict[dirfileKey]['reports']

logRoot = dirfileLog if "/" in dirfileLog or "\\" in dirfileLog else "%s/%s" % (dirfilePath,dirfileLog)
print("logRoot:%s" % logRoot)
uploadsRoot = dirfileUploads if "/" in dirfileUploads or "\\" in dirfileUploads else "%s/%s" % (dirfilePath,dirfileUploads)
print("uploadsRoot:%s" % uploadsRoot)
reportsRoot = dirfileReports if "/" in dirfileReports or "\\" in dirfileReports else "%s/%s" % (dirfilePath,dirfileReports)
print("reportsRoot:%s" % reportsRoot)

print("CONF_KEYS:dbKey[%s] tcpKey[%s] webKey[%s] emailKey[%s]" % (dbKey,tcpKey,webKey,emailKey))
print("#############################################################################\n"
      "###############################isRelase[%s]###############################\n"
      "#############################################################################" % ((isRelease)))

loggingDict = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },  
    },
    'handlers': {
        'fileInvoke': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '%s/invoke.log' % logRoot,
        },
        'fileInterface': {
            'level': 'INFO' ,
            'class': 'logging.FileHandler',
            'filename': '%s/interface.log' % logRoot,
        },
        'fileDjango': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '%s/django.log' % logRoot,
            'formatter': 'verbose'
        },
        'console': {
            'level':'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'userlog': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '%s/user_opration.log' % logRoot,
            'maxBytes': 1024*1024*10,
            'backupCount': 5,
            'encoding': "utf-8",
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'invoke': {
            'handlers': ['fileInvoke'],
            'level': 'INFO',
            'propagate': True,
        },
        'interface': {
            'handlers': ['fileInterface'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['fileDjango','console'],
            'level': 'INFO',
            'propagate': True,
        },
        'userlog': {
            'handlers': ['userlog'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = eval(confDict[webKey]['debug'])
LOGGING = loggingDict

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'all_models',
    'all_models_for_dubbo',
    'all_models_for_ui',
    'all_models_for_mock',
    'all_models_for_datacollect',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.common.middleware.LoginMiddleWare.LoginMiddleWare', #我的登录过滤中间件
    'apps.common.middleware.blockedUrlMiddleWare.blockedUrlMiddleWare', #我的登录过滤中间件
]
# DEFAULT_CHARSET = "GBK"
ROOT_URLCONF = 'AutotestWebD.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), os.path.join(BASE_DIR, 'reports'), os.path.join(BASE_DIR, 'uploads'), os.path.join(BASE_DIR,'static/ui_test_reports')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'AutotestWebD.GlobalFunc.menu',
                'AutotestWebD.GlobalFunc.site',
                'AutotestWebD.adminPermsion.adminPermsion'
                # 'AutotestWebD.webPortalBusinessLine.webPortalBusinessLine'
            ],
        },
    },
]

WSGI_APPLICATION = 'AutotestWebD.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': dbName,
        'USER': dbUsername,
        'PASSWORD': dbPassword,
        'HOST': dbHost,
        'PORT': dbPort,
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_VERSION = time.time() #每次重启服务自动更新tag
# STATIC_ROOT =  BASE_DIR.replace("\\","/").split("/AutotestWebD")[0]+"/AutotestWebD/static"  #生成admin的static用
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

LOGIN_URL = "/"
NO_AUTH_URLS = ["/admin/","/invoke","/mock/","/readme","/webportal","/reports","/s/","/static/","/user/login","/user/dologin","/myadmin/login",
                "/ui_report","/updateLevel","/batchTask","/uploadAPK","/uploadAPP","/myadmin/logout", "/myadmin/changeLog/check",
                "/myadmin/userLog/check","/tools/deploymentCallBack","/tools/doDeployment","/interfaceTest/HTTP_GlobalVarsGetForId",
                "/interfaceTest/HTTP_GlobalVarsSetForId","/interfaceTest/HTTP_GlobalTextGetForId","/interfaceTest/HTTP_GlobalTextSetForId",
                "/interfaceTest/test","/dubbosug","/statistic/alltask","/statistictask/setReason",
                "/testsql","/testsql2"]
MYADMIN_URLS = ["/myadmin/"]



djangoSettingSplitString = "[DJANGOSETTINGINFOS]"
print(djangoSettingSplitString)

REDIS_HOST = confDict[redisKey]['host']
REDIS_PORT = confDict[redisKey]['port']
REDIS_PWD = confDict[redisKey]['password']
